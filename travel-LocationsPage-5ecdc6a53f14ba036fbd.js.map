{"version":3,"sources":["webpack:///./src/packages/travel/pages/LocationsPage/blocks/LocationRating.jsx","webpack:///./src/packages/travel/pages/LocationsPage/LocationsPage.jsx","webpack:///./src/packages/travel/pages/LocationsPage/useUserLocations.js","webpack:///./src/packages/travel/dataSource/useTrips.js","webpack:///./src/packages/travel/dataSource/useCountries.js","webpack:///./src/packages/travel/dataSource/useUser.js","webpack:///./src/packages/travel/dataSource/useLocations.js","webpack:///./src/packages/travel/components/common/LocationsMap/useMarkers.js","webpack:///./src/packages/travel/components/common/LocationsMap/LocationsMap.jsx"],"names":["RATING_LOCALIZATION","LOCATION_RATING","PLACE_TO_LIVE","FEW_PER_YEAR","ONCE_PER_YEAR","ONCE_PER_TWO_YEARS","ONCE_PER_FIVE_YEARS","ONCE_PER_DECADE","TWICE_PER_LIVE","ONCE_PER_LIVE","NEVER","useStyles","makeStyles","formControl","width","LocationRating","locationId","locationRating","isEditable","onSubmitLocationRating","classes","FormControl","className","InputLabel","shrink","id","Select","labelId","value","onChange","event","target","MenuItem","propTypes","PropTypes","number","isRequired","bool","func","defaultProps","container","fontSize","lineHeight","visitContainer","margin","location","fontWeight","googleMapContainer","maxWidth","height","maxHeight","LocationsPage","match","params","userAlias","strLocationId","useAuthContext","isAuthenticated","authenticatedUserAlias","domain","useTripsStats","isError","isPending","locationsDict","locationsIds","locationsRating","submitLocationRating","useLocationRatingRequest","useUserLocations","parseInt","actualLocationsIds","handleSubmitLocationRating","useCallback","locationIdToSubmit","query","rating","String","condition","Boolean","includes","LocationsMap","map","locationsIdToRender","locationName","Fragment","key","shape","string","tripsProvision","requiredTripsIds","tripsIds","tripsDict","useSelector","state","selectDict","shouldRequireAllTrips","missingTripsIds","filter","tripId","useProvision","isProvision","modelName","observe","navigation","isDisabled","comparator","useTrips","useUser","user","userProvision","selectResult","data","visitsDict","ridesDict","countriesDict","visitsIds","Array","from","Set","flatMap","tripsId","visits","ridesIds","rides","countriesIds","visitId","countryId","countriesProvision","useCountries","locationsProvision","useLocations","commonProvisionState","provisions","updatesCounter","sum","selectUpdatesCounter","isReady","every","selectIsReady","some","selectIsPending","isValid","selectIsValid","error","find","selectIsError","errors","selectError","invalidate","forEach","mergeProvisionsState","countriesRating","ratingsGroupedByCountries","reduce","memo","push","mapValues","ratingsByCountry","ratings","length","Infinity","avg","a","b","best","max","lengthRatio","Math","log","averageRating","calcCountriesRating","ridesStats","calcRidesStats","earliestDeparture","Date","min","rideId","departureDateTime","getTime","latestArrival","arrivalDateTime","provision","isLoading","counters","selectItem","applicableSchemaName","requiredLocationIds","missingLocationsIds","useRequest","method","createControlledPromise","resolver","rejector","promise","Promise","resolve","reject","handleGoogleApiLoaded","markersCoords","useMemo","apiPromise","previousCoords","useRef","changesCount","useEffect","isEqual","current","markers","then","api","maps","bounds","LatLngBounds","lat","lon","marker","Marker","position","lng","extend","fitBounds","getZoom","setZoom","setMap","useMarkers","locationIdToShowMarker","bootstrapURLKeys","__GOOGLE_MAP_API_KEY__","center","zoom","onGoogleApiLoaded","objectOf","locationPropTypes","arrayOf"],"mappings":"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","file":"travel-LocationsPage-5ecdc6a53f14ba036fbd.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { LOCATION_RATING } from 'travel/models/users/consts';\n\nconst RATING_LOCALIZATION = {\n  [LOCATION_RATING.PLACE_TO_LIVE]: 'Жил бы здесь',\n  [LOCATION_RATING.FEW_PER_YEAR]: 'Несколько раз в год',\n  [LOCATION_RATING.ONCE_PER_YEAR]: 'Раз в год',\n  [LOCATION_RATING.ONCE_PER_TWO_YEARS]: 'Раз в пару лет',\n  [LOCATION_RATING.ONCE_PER_FIVE_YEARS]: 'Раз в пять лет',\n  [LOCATION_RATING.ONCE_PER_DECADE]: 'Раз в десятилетие',\n  [LOCATION_RATING.TWICE_PER_LIVE]: 'Пару раз в жизни',\n  [LOCATION_RATING.ONCE_PER_LIVE]: 'Раз в жизни',\n  [LOCATION_RATING.NEVER]: 'Никогда',\n};\n\nconst useStyles = makeStyles({\n  formControl: {\n    width: '100%',\n  },\n});\n\nexport default function LocationRating({\n  locationId,\n  locationRating,\n  isEditable,\n  onSubmitLocationRating,\n}) {\n  const classes = useStyles();\n  if (!isEditable) {\n    return <div>{RATING_LOCALIZATION[locationRating]}</div>;\n  }\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel shrink={true} id=\"select-location-rating-label\">\n        Я бы ездил сюда\n      </InputLabel>\n      <Select\n        labelId=\"select-location-rating-label\"\n        id=\"select-location-rating\"\n        value={locationRating}\n        onChange={event => {\n          onSubmitLocationRating(event, locationId, event.target.value);\n        }}\n      >\n        <MenuItem value={LOCATION_RATING.PLACE_TO_LIVE}>\n          {RATING_LOCALIZATION[LOCATION_RATING.PLACE_TO_LIVE]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.FEW_PER_YEAR}>\n          {RATING_LOCALIZATION[LOCATION_RATING.FEW_PER_YEAR]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.ONCE_PER_YEAR}>\n          {RATING_LOCALIZATION[LOCATION_RATING.ONCE_PER_YEAR]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.ONCE_PER_TWO_YEARS}>\n          {RATING_LOCALIZATION[LOCATION_RATING.ONCE_PER_TWO_YEARS]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.ONCE_PER_FIVE_YEARS}>\n          {RATING_LOCALIZATION[LOCATION_RATING.ONCE_PER_FIVE_YEARS]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.ONCE_PER_DECADE}>\n          {RATING_LOCALIZATION[LOCATION_RATING.ONCE_PER_DECADE]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.TWICE_PER_LIVE}>\n          {RATING_LOCALIZATION[LOCATION_RATING.TWICE_PER_LIVE]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.ONCE_PER_LIVE}>\n          {RATING_LOCALIZATION[LOCATION_RATING.ONCE_PER_LIVE]}\n        </MenuItem>\n        <MenuItem value={LOCATION_RATING.NEVER}>\n          {RATING_LOCALIZATION[LOCATION_RATING.NEVER]}\n        </MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\n\nLocationRating.propTypes = {\n  locationRating: PropTypes.number,\n  locationId: PropTypes.number.isRequired,\n  isEditable: PropTypes.bool.isRequired,\n  onSubmitLocationRating: PropTypes.func.isRequired,\n};\n\nLocationRating.defaultProps = { locationRating: null };\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useAuthContext } from 'core/context/AuthContext';\nimport LocationsMap from 'travel/components/common/LocationsMap';\nimport LocationRating from './blocks/LocationRating';\nimport useUserLocations from './useUserLocations';\n\nconst useStyles = makeStyles({\n  container: { fontSize: '16px', lineHeight: '1.5' },\n  visitContainer: { margin: '20px 0' },\n  location: { fontWeight: 'bold', fontSize: '21px' },\n  googleMapContainer: {\n    margin: '12px 0',\n    width: '800px',\n    maxWidth: '100%',\n    height: '400px',\n    maxHeight: '100%',\n  },\n});\n\nconst domain = 'travel.LocationsPage';\nexport default function LocationsPage({\n  match: {\n    params: { userAlias, strLocationId },\n  },\n}) {\n  const classes = useStyles();\n\n  const {\n    isAuthenticated,\n    userAlias: authenticatedUserAlias,\n  } = useAuthContext();\n\n  const {\n    isError,\n    isPending,\n    locationsDict,\n    locationsIds,\n    locationsRating,\n    submitLocationRating,\n  } = useUserLocations({ domain, userAlias });\n\n  const locationId = parseInt(strLocationId, 10);\n  const actualLocationsIds = locationId ? [locationId] : locationsIds;\n\n  const handleSubmitLocationRating = useCallback(\n    (event, locationIdToSubmit, value) => {\n      submitLocationRating({\n        query: { rating: value, id: String(locationIdToSubmit) },\n        condition: Boolean(locationIdToSubmit),\n      });\n    },\n  );\n\n  if (isError) {\n    return <div>...Error</div>;\n  }\n  if (isPending) {\n    return <div>...Loading</div>;\n  }\n  if (locationId && !locationsIds.includes(locationId)) {\n    return (\n      <div>{`Путешественик ${userAlias} еще не посетил данную локацию`}</div>\n    );\n  }\n\n  const isEditable = isAuthenticated && authenticatedUserAlias === userAlias;\n  return (\n    <div className={classes.container}>\n      <LocationsMap\n        locationsDict={locationsDict}\n        locationsIds={actualLocationsIds}\n      />\n      {actualLocationsIds.map(locationsIdToRender => {\n        const location = locationsDict[locationsIdToRender];\n        if (!location) {\n          return null;\n        }\n        const { locationName } = location;\n        return (\n          <React.Fragment key={locationsIdToRender}>\n            <h1 className={classes.location}>{locationName}</h1>\n            <LocationRating\n              locationId={locationsIdToRender}\n              locationRating={locationsRating[locationsIdToRender]}\n              isEditable={isEditable}\n              onSubmitLocationRating={handleSubmitLocationRating}\n            />\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nLocationsPage.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      userAlias: PropTypes.string.isRequired,\n      strLocationId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n","import useUser from 'travel/dataSource/useUser';\nimport { useTripsStats } from 'travel/dataSource/useTrips';\nimport { useLocationRatingRequest } from 'travel/dataSource/useLocations';\n\nexport default function useUserLocations({ domain, userAlias }) {\n  const {\n    isError,\n    isPending,\n    locationsDict,\n    locationsIds = [],\n    locationsRating,\n  } = useTripsStats({\n    userAlias,\n  });\n  const { submitLocationRating } = useLocationRatingRequest({ domain });\n\n  return {\n    isError,\n    isPending,\n    locationsDict,\n    locationsIds,\n    locationsRating,\n    submitLocationRating,\n  };\n}\n","import { useSelector } from 'react-redux';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\nimport sum from 'lodash/sum';\nimport mapValues from 'lodash/mapValues';\nimport { useProvision, selectDict } from 'core/connection';\nimport {\n  selectResult,\n  selectIsPending,\n  selectIsReady,\n  selectIsError,\n  selectError,\n  selectIsValid,\n  selectUpdatesCounter,\n} from 'core/connection/request/controllerRedux';\nimport useUser from './useUser';\nimport useCountries from './useCountries';\nimport useLocations from './useLocations';\n\nexport default function useTrips({ userAlias, tripsIds: requiredTripsIds }) {\n  const { tripsDict } = useSelector(state => ({\n    tripsDict: selectDict(state, 'trips') || {},\n  }));\n  const shouldRequireAllTrips = !requiredTripsIds;\n  const missingTripsIds =\n    !shouldRequireAllTrips &&\n    requiredTripsIds.filter(tripId => !tripsDict[tripId]);\n\n  return useProvision({\n    domain: `travel.trips-${userAlias}`,\n    isProvision: true,\n    modelName: 'trips',\n    observe: userAlias,\n    query: {\n      userAlias,\n      navigation: { isDisabled: true },\n      filter: shouldRequireAllTrips\n        ? {}\n        : { id: { comparator: 'in', value: missingTripsIds } },\n    },\n  });\n}\n\nexport function useTripsStats({ userAlias, tripsIds: requiredTripsIds }) {\n  const tripsProvision = useTrips({ userAlias, tripsIds: requiredTripsIds });\n  const { user: { locationsRating = {} } = {}, ...userProvision } = useUser({\n    domain: `travel.trips-${userAlias}.user`,\n    userAlias,\n  });\n\n  const { data: tripsIds = [] } = selectResult(tripsProvision) || {};\n\n  const {\n    tripsDict,\n    visitsDict,\n    ridesDict,\n    countriesDict,\n    locationsDict,\n  } = useSelector(state => ({\n    tripsDict: selectDict(state, 'trips') || {},\n    visitsDict: selectDict(state, 'visits') || {},\n    ridesDict: selectDict(state, 'rides') || {},\n    countriesDict: selectDict(state, 'countries') || {},\n    locationsDict: selectDict(state, 'locations') || {},\n  }));\n\n  const visitsIds = Array.from(\n    new Set(tripsIds.flatMap(tripsId => tripsDict[tripsId]?.visits || [])),\n  );\n\n  const ridesIds = Array.from(\n    new Set(tripsIds.flatMap(tripsId => tripsDict[tripsId]?.rides || [])),\n  );\n\n  const countriesIds = Array.from(\n    new Set(visitsIds.flatMap(visitId => visitsDict[visitId]?.countryId || [])),\n  );\n\n  const locationsIds = Array.from(\n    new Set(\n      visitsIds.flatMap(visitId => visitsDict[visitId]?.locationId || []),\n    ),\n  );\n\n  const countriesProvision = useCountries();\n  const locationsProvision = useLocations({\n    domain: `travel.locations-${userAlias}`,\n    locationsIds,\n  });\n\n  const commonProvisionState = mergeProvisionsState(\n    tripsProvision,\n    userProvision,\n    countriesProvision,\n    locationsProvision,\n  );\n\n  const { isError, isValid, isReady, isPending } = commonProvisionState;\n\n  const countriesRating = calcCountriesRating(\n    locationsIds,\n    locationsDict,\n    locationsRating,\n  );\n\n  return {\n    tripsProvision,\n    countriesProvision,\n    locationsProvision,\n\n    isError,\n    isValid,\n    isReady,\n    isPending,\n\n    tripsIds,\n    tripsDict,\n    visitsIds,\n    visitsDict,\n    ridesIds,\n    ridesDict,\n    ridesStats: calcRidesStats(ridesIds, ridesDict),\n    locationsIds,\n    locationsDict,\n    locationsRating,\n    countriesIds,\n    countriesDict,\n    countriesRating,\n  };\n}\n\nfunction mergeProvisionsState(...provisions) {\n  return {\n    updatesCounter: sum(provisions.map(selectUpdatesCounter)),\n    isReady: provisions.every(selectIsReady),\n    isPending: provisions.some(selectIsPending),\n    isValid: provisions.every(selectIsValid),\n    error: provisions.find(selectIsError),\n    errors: provisions.map(selectError).filter(Boolean),\n    invalidate: () => provisions.forEach(({ invalidate }) => invalidate()),\n  };\n}\n\nfunction calcRidesStats(ridesIds, ridesDict) {\n  return {\n    earliestDeparture: new Date(\n      min(\n        ridesIds.map(rideId => ridesDict[rideId]?.departureDateTime.getTime()),\n      ),\n    ),\n    latestArrival: new Date(\n      max(ridesIds.map(rideId => ridesDict[rideId]?.arrivalDateTime.getTime())),\n    ),\n  };\n}\n\nfunction calcCountriesRating(locationsIds, locationsDict, locationsRating) {\n  const ratingsGroupedByCountries = locationsIds.reduce((memo, locationId) => {\n    const location = locationsDict[locationId];\n    if (!location) {\n      return memo;\n    }\n    const locationRating = locationsRating[locationId];\n    const { countryId } = location;\n    if (!memo[countryId]) {\n      memo[countryId] = [];\n    }\n    memo[countryId].push(locationRating);\n    return memo;\n  }, {});\n\n  return mapValues(ratingsGroupedByCountries, ratingsByCountry =>\n    averageRating(ratingsByCountry),\n  );\n}\n\nfunction averageRating(ratings) {\n  if (!ratings.length) {\n    return Infinity;\n  }\n  const avg =\n    ratings.length / ratings.map(rating => 1 / rating).reduce((a, b) => a + b);\n\n  const best = max(ratings);\n\n  const lengthRatio = Math.log(ratings.length);\n\n  return 1 / (1 / avg + lengthRatio / best);\n}\n","import { useProvision } from 'core/connection';\nimport {\n  selectResult,\n  selectIsReady,\n  selectIsPending,\n  selectIsError,\n} from 'core/connection/request/controllerRedux';\n\nexport default function useCountries() {\n  const provision = useProvision({\n    domain: `travel.countries`,\n    isProvision: true,\n    modelName: 'countries',\n    query: { navigation: { isDisabled: true } },\n  });\n\n  const { data: countriesIds = [] } = selectResult(provision) || {};\n\n  return {\n    countriesIds,\n    isReady: selectIsReady(provision),\n    isLoading: selectIsPending(provision),\n    isError: selectIsError(provision),\n    counters: provision.counters,\n  };\n}\n","import { useSelector } from 'react-redux';\nimport { useProvision, selectItem } from 'core/connection';\n\nexport default function useUser({ domain, userAlias }) {\n  const user = useSelector(state => selectItem(state, 'users', userAlias));\n  const provision = useProvision({\n    domain,\n    applicableSchemaName: 'item',\n    isProvision: true,\n    modelName: 'users',\n    observe: userAlias,\n    condition: Boolean(userAlias),\n    query: {\n      id: userAlias,\n    },\n  });\n  return { ...provision, user };\n}\n","import { useSelector } from 'react-redux';\nimport {\n  useProvision,\n  useRequest,\n  selectDict,\n} from 'core/connection';\nimport {\n  selectIsPending,\n  selectIsError,\n  selectIsReady,\n} from 'core/connection/request/controllerRedux';\n\nexport default function useLocations({\n  domain,\n  locationsIds: requiredLocationIds,\n}) {\n  const locationsDict = useSelector(\n    state => selectDict(state, 'locations') || {},\n  );\n\n  const missingLocationsIds = requiredLocationIds.filter(\n    locationId => !locationsDict[locationId],\n  );\n\n  const provision = useProvision({\n    domain,\n    isProvision: true,\n    modelName: 'locations',\n    observe: requiredLocationIds,\n    condition: Boolean(missingLocationsIds.length),\n    query: {\n      filter: { id: { comparator: 'in', value: missingLocationsIds } },\n      navigation: { isDisabled: true },\n    },\n  });\n\n  return {\n    locationsDict,\n    isReady: selectIsReady(provision),\n    isLoading: selectIsPending(provision),\n    isError: selectIsError(provision),\n    counters: provision.counters,\n  };\n}\n\nexport function useLocationRatingRequest({ domain }) {\n  const [submitLocationRating, provision] = useRequest({\n    domain,\n    modelName: 'locations',\n    method: 'POST',\n  });\n\n  return {\n    ...provision,\n    submitLocationRating,\n  };\n}\n","import { useMemo, useEffect, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\n\nconst createControlledPromise = () => {\n  // This fields will be initialized synchronously in promise constructor\n  let resolver = null;\n  let rejector = null;\n\n  const promise = new Promise((resolve, reject) => {\n    resolver = resolve;\n    rejector = reject;\n  });\n  return { promise, resolver, rejector };\n};\n\nexport default markersCoords => {\n  const { promise: apiPromise, resolver: handleGoogleApiLoaded } = useMemo(\n    createControlledPromise,\n    [],\n  );\n\n  const previousCoords = useRef(null);\n  const changesCount = useRef(0);\n\n  useEffect(() => {\n    if (!isEqual(previousCoords, markersCoords)) {\n      changesCount.current += 1;\n    }\n  });\n\n  useEffect(\n    () => {\n      let markers = [];\n      apiPromise.then(api => {\n        const { map, maps } = api;\n        const bounds = new maps.LatLngBounds();\n        markers = markersCoords.map(({ lat, lon }) => {\n          const marker = new maps.Marker({ position: { lat, lng: lon }, map });\n          bounds.extend(marker.position);\n          return marker;\n        });\n        map.fitBounds(bounds);\n        const zoom = map.getZoom();\n        if (zoom > 11) {\n          map.setZoom(11);\n        }\n      });\n      return () => markers.forEach(marker => marker.setMap(null));\n    },\n    [changesCount.current],\n  );\n  return { handleGoogleApiLoaded };\n};\n","/* globals __GOOGLE_MAP_API_KEY__ */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport GoogleMapReact from 'google-map-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport locationPropTypes from 'travel/models/locations/propTypes';\nimport useMarkers from './useMarkers';\n\nconst useStyles = makeStyles({\n  googleMapContainer: {\n    margin: '12px 0',\n    maxWidth: '100%',\n    height: ({ height }) => height,\n    maxHeight: '100%',\n  },\n});\n\nexport default function LocationsMap({ locationsDict, locationsIds, height }) {\n  const classes = useStyles({ height });\n\n  const { handleGoogleApiLoaded } = useMarkers(\n    locationsIds.map(\n      locationIdToShowMarker => locationsDict[locationIdToShowMarker],\n    ),\n  );\n\n  return (\n    <div className={classes.googleMapContainer}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: __GOOGLE_MAP_API_KEY__ }}\n        center={{ lat: 0, lng: 0 }}\n        zoom={11}\n        onGoogleApiLoaded={handleGoogleApiLoaded}\n      />\n    </div>\n  );\n}\n\nLocationsMap.propTypes = {\n  locationsDict: PropTypes.objectOf(PropTypes.shape(locationPropTypes))\n    .isRequired,\n  locationsIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  height: PropTypes.string,\n};\n\nLocationsMap.defaultProps = {\n  height: '400px',\n};\n"],"sourceRoot":""}