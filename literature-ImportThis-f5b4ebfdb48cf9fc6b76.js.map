{"version":3,"sources":["webpack:///./src/packages/literature/pages/Articles/blocks/Article/designed/ImportThis.jsx","webpack:///./src/packages/literature/pages/Articles/blocks/Article/designed/themeComponents/lora.js"],"names":["ImportThis","youtubeId","href","description","Container","children","rel","Article","Header","styled","header","article","Paragraph","div","ParagraphTitle","h3","ParagraphTitleWithCounter","AdditionalInfo","Reference","StyledBlockTitle","h4","StyledBlockBody","blockquote","nodeOrStringPropType","PropTypes","oneOfType","node","string","Block","title","propTypes","isRequired","Quote","Guidance","Example","defaultProps","Footnote","ChaptersList","ol","Chapter","li","ChapterWithCounter","Clause","OrderedList","UnorderedList","ul","Small","p","VideoContainer","VideoContent","iframe","YoutubeVideo","src","frameBorder"],"mappings":"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","file":"literature-ImportThis-f5b4ebfdb48cf9fc6b76.js","sourcesContent":["import React from 'react';\nimport {\n  Chapter,\n  ChaptersList,\n  ChapterWithCounter,\n  Container,\n  Example,\n  Header,\n  Paragraph,\n  ParagraphTitle,\n  ParagraphTitleWithCounter,\n  Quote,\n  AdditionalInfo,\n  Reference,\n  YoutubeVideo,\n} from './themeComponents/lora';\n\nfunction ImportThis() {\n  return (\n    <Container>\n      <Header>\n        <Reference>\n          По&nbsp;мотивам корпоративного выступления от&nbsp;08.08.2019\n        </Reference>\n        <h1>import this</h1>\n        <h3>\n          19&nbsp;принципов достижения Дзена при написании компьютерных программ\n        </h3>\n      </Header>\n      <main>\n        <Paragraph>\n          Хороший код&nbsp;&mdash; понятие субъективное. Я&nbsp;приписываю ему\n          два основных качества: его должно быть легко понять и&nbsp;в&nbsp;него\n          должно быть легко внести изменения. Таким образом, хороший код\n          остается легко дорабатываемым. Это качество высоко оценят\n          и&nbsp;заказчик и коллеги-программисты. В&nbsp;этой статье\n          я&nbsp;делюсь своими подходами к написанию кода.\n        </Paragraph>\n        <ChaptersList>\n          <Chapter>\n            <ParagraphTitle>Import this.</ParagraphTitle>\n            <Paragraph>\n              Если вы&nbsp;работали с&nbsp;Питоном, то&nbsp;возможно слышали про\n              пасхалку из заголовка статьи. Если выполнить в&nbsp;стандартном\n              интерпретаторе Питона import this, то&nbsp;будет выведен девиз\n              из&nbsp;девятнадцати предложений, называемый Zen of&nbsp;Python.\n              <YoutubeVideo youtubeId=\"8BvOfsMN8bI\" />\n            </Paragraph>\n            <Paragraph>\n              Пусть эти постулаты несколько туманны и&nbsp;даже порой\n              противоречивы, мне они все равно нравятся, за&nbsp;то, что наводят\n              на&nbsp;размышления из которых можно вывести более четкие правила.\n            </Paragraph>\n          </Chapter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Beautiful is&nbsp;better than ugly.\n              <AdditionalInfo>Красивое лучше, чем уродливое.</AdditionalInfo>\n            </ParagraphTitle>\n            <Quote>\n              &laquo;Некрасивое решение&nbsp;&mdash; точно неправильное.\n              Красивое &mdash; возможно правильное.&raquo;\n            </Quote>\n            <Paragraph>\n              К&nbsp;сожалению, не&nbsp;вспомнил автора афоризма.\n              В&nbsp;оригинале имелась ввиду математическая задача,\n              но&nbsp;не&nbsp;вижу препятствий, в&nbsp;применении цитаты\n              к&nbsp;решениям в&nbsp;разработке ПО. Перефразируя, если\n              вы&nbsp;нашли решение, но&nbsp;оно вас смущает\n              по&nbsp;эстетическим причинам, то&nbsp;наверняка можно найти более\n              ловкий подход или хотя&nbsp;бы попытаться это сделать.\n            </Paragraph>\n            <Paragraph>\n              В&nbsp;коде следует избегать избыточных действий\n              и&nbsp;информации. Иногда лишняя информация не&nbsp;совсем\n              очевидна. Например, если ваши данные неупорядоченны,\n              то&nbsp;некрасиво использовать их&nbsp;для хранения массив.\n            </Paragraph>\n            <Paragraph>\n              Сам массив (не&nbsp;кортеж), обыкновенно подразумевает обращение\n              к&nbsp;его элементам путем перебора. Поэтому обращение\n              к&nbsp;элементу массива по индексу выглядит некрасиво\n              и&nbsp;вероятно свидетельствует о&nbsp;неудачном архитектурном\n              решении.\n            </Paragraph>\n            <Paragraph>\n              Еще я&nbsp;пользуюсь принципом, который назвал про себя принципом\n              симметрии, полагаю у&nbsp;него есть и&nbsp;нормальное, научное,\n              название. Он о&nbsp;том, что если два понятия находятся\n              на&nbsp;одном уровне абстракции, то&nbsp;обращения к&nbsp;ним\n              должны происходить схожим образом. В&nbsp;противном случае,\n              в&nbsp;коде одно или несколько из&nbsp;таких обращений начинают\n              обрабатываться как исключительные ситуации, что не&nbsp;есть\n              хорошо. Но об&nbsp;этом чуть позже.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Explicit is&nbsp;better than implicit.\n              <AdditionalInfo>Явное лучше, чем неявное.</AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              Кажется это уже притча во&nbsp;языцех. Но&nbsp;все-таки\n              в&nbsp;программистах, в том числе и&nbsp;во&nbsp;мне, живет\n              непреодолимое стремление сделать какой-нибудь трюк в&nbsp;коде.\n              Считается, что знание всяких квирков это индикатор знания языка.\n              Возможно, по&nbsp;количеству изученных хаков удобно отсекать\n              соискателей на&nbsp;собеседовании, но&nbsp;я&nbsp;бы поспорил с\n              практичностью этого подхода.\n            </Paragraph>\n            <Paragraph>\n              По&nbsp;крайней мере в&nbsp;прикладном коде они крайне\n              нежелательны, т.к. скорее напоминают архивирование,\n              а&nbsp;не&nbsp;оптимизацию. И&nbsp;коллеги, прежде чем смогут\n              приняться за&nbsp;полезную работу, будут обречены на распаковку\n              оригинальных идей, спрятанных за&nbsp;необычными комбинациями\n              операторов.\n            </Paragraph>\n            <Paragraph>\n              Если язык или библиотека дают вам возможность что-то сделать\n              неявно, стоит подумать дважды, прежде чем пользоваться этим. Ведь\n              для ваших коллег, да&nbsp;и&nbsp;скорее всего для вас\n              в&nbsp;будущем, смысл происходящего тоже станет неявен.\n              И&nbsp;придется потратить время на разбирательства.\n            </Paragraph>\n            <Paragraph>\n              Использование значения по&nbsp;умолчанию&nbsp;&mdash; это тоже про\n              неявное присваивание. Проблема в&nbsp;том, что не&nbsp;всегда\n              понятно, соответствует ли&nbsp;такое поведение замыслу\n              программиста или он&nbsp;просто забыл передать соответствующий\n              параметр.\n            </Paragraph>\n            <Paragraph>\n              Есть конечно и&nbsp;исключения из&nbsp;этого правила, которые\n              продиктованы здравым смыслом. Например контекст. Контекст\n              используется, чтобы не&nbsp;передавать ссылки через нескольких\n              посредников. При разумном использовании это делает код более\n              кратким, емким и&nbsp;надежным. И это преимущество контекста\n              перевешивает издержки от&nbsp;его неявной сути.\n            </Paragraph>\n            <Paragraph>\n              Тем не&nbsp;менее, можно проследить, как контекст остается\n              в&nbsp;поле сакральных знаний о&nbsp;проекте. Например, если\n              мы&nbsp;передаем в контексте сведения об&nbsp;используемом\n              устройстве, новичок в&nbsp;проекте может не&nbsp;заметить этого\n              и&nbsp;продублировать вычисления в&nbsp;своем компоненте.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Simple is&nbsp;better than complex.\n              <AdditionalInfo>Простое лучше, чем сложное.</AdditionalInfo>\n            </ParagraphTitle>\n            <ParagraphTitleWithCounter>\n              Complex is&nbsp;better than complicated.\n              <AdditionalInfo>Сложное лучше, чем запутанное.</AdditionalInfo>\n            </ParagraphTitleWithCounter>\n            <Paragraph>\n              Согласно{' '}\n              <a href=\"https://www.ozon.ru/context/detail/id/142768363/\">\n                Стивену Макконелу\n              </a>\n              , главный принцип разработки ПО&nbsp;&mdash; это управление\n              сложностью. Сложность и&nbsp;непредсказуемость окружающего мира\n              передается бизнес-правилам. Без контроля она выйдет за&nbsp;рамки\n              когнитивных способностей человека. То&nbsp;есть взорвет\n              исполнителю мозг, т.к. есть предел у&nbsp;количества информации,\n              которой можно оперировать в&nbsp;один момент времени.\n            </Paragraph>\n            <Paragraph>\n              Не&nbsp;уследив за&nbsp;сложностью, приходится тратить драгоценное\n              время на разбор багов, разбор полетов или разработку безопасных\n              воркараундов. А&nbsp;воркараунды порочным кругом ведут\n              к&nbsp;росту сложности проекта. Фичи пилятся медленнее, баги все\n              более запутанные и&nbsp;всем от&nbsp;этого грустно.\n            </Paragraph>\n            <Paragraph>\n              Поэтому, со&nbsp;сложностью надо бороться. Следить\n              за&nbsp;связностью и зацеплением. Вместо методов Бога, состоящих\n              из&nbsp;сотен строк, использовать небольшие, связанные методы,\n              на&nbsp;понимание которых требуется минимальное время,\n              а&nbsp;также выносить в&nbsp;отдельные модули утилиты, компоненты.\n            </Paragraph>\n            <Paragraph>\n              Стоит подумать о&nbsp;том, насколько обширна область,\n              в&nbsp;которую придется погрузиться вашим коллегам, когда придет\n              их&nbsp;очередь работать с&nbsp;вашим кодом. Это и&nbsp;объем\n              кода, и&nbsp;сущности которые в&nbsp;нем описаны. Можно сузить\n              область, выделив сущности в&nbsp;отдельные пакеты\n              и&nbsp;подготовив АПИ для использования их&nbsp;в&nbsp;основной\n              части приложения.\n            </Paragraph>\n            <Paragraph>\n              Кроме борьбы со&nbsp;сложностью в&nbsp;коде, боритесь с&nbsp;ней\n              и&nbsp;в бизнес-логике. Все равно, бизнес-логика это карта\n              и&nbsp;она не&nbsp;станет территорией. Но&nbsp;каждая\n              дополнительная деталь стоит времени и денег. Иногда это\n              оправданно, иногда нет, ваш продакт-менеджер как раз\n              и&nbsp;занимается тем, что определяет, какой участок\n              детализировать следующим. У&nbsp;вас с&nbsp;ним одна\n              цель&nbsp;&mdash; качественный продукт. И&nbsp;если вы вместе\n              найдете способ уменьшить сложность бизнес-логики&nbsp;&mdash;\n              выиграют все.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Flat is&nbsp;better than nested.\n              <AdditionalInfo>Плоское лучше, чем вложенное.</AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              В&nbsp;иерархических структурах кажется хорошей идеей\n              рассматривать только два уровня за&nbsp;раз. Это относится\n              и&nbsp;к&nbsp;ветвлению в&nbsp;коде, и&nbsp;к декомпозиции\n              объектов. Глубокая вложенность&nbsp;&mdash; это сигнал, что на\n              данном участке кода сконцентрирована излишняя сложность.\n            </Paragraph>\n            <Paragraph>\n              Когда в&nbsp;коде встречается ветвление глубиной больше чем один\n              уровень, то&nbsp;стоит подумать о&nbsp;рефакторинге и&nbsp;вынести\n              вложенные инструкции в&nbsp;отдельный метод.\n            </Paragraph>\n            <Paragraph>\n              Обращение к&nbsp;полям объекта, вложенным на&nbsp;нескольких\n              уровнях&nbsp;&mdash; может быть сигналом о&nbsp;чрезмерно\n              разросшейся сущности или о&nbsp;том, что метод пытается работать\n              с&nbsp;разными уровнями абстракции.\n            </Paragraph>\n            <Paragraph>\n              Обращение к&nbsp;полю поля класса, это подозрительно\n              и&nbsp;ненадежно, следует подумать о&nbsp;создании геттера.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Sparse is&nbsp;better than dense.\n              <AdditionalInfo>Разреженное лучше, чем плотное.</AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              В&nbsp;моей интерпретации это правило о&nbsp;том, что не&nbsp;надо\n              стараться уместить как можно больше логики в&nbsp;одну\n              конструкцию. Наоборот, следует каждый шаг вычисления выделять\n              в&nbsp;отдельное выражение. Тем более не&nbsp;стоит экономить\n              на&nbsp;строках или символах в&nbsp;коде. Это перекликается\n              и&nbsp;с&nbsp;предыдущим тезисом про плоскую структуру.\n            </Paragraph>\n            <Paragraph>\n              Есть одна вещь которую программисту стоит любить больше, чем\n              писать код&nbsp;&mdash; это удалять код. Я&nbsp;бы считал\n              причастившимися к&nbsp;Дзену тех программистов, у&nbsp;которых\n              удаление собственного кода вызывает не&nbsp;сожаление,\n              а&nbsp;удовлетворение и&nbsp;чувство хорошо сделанной работы.\n            </Paragraph>\n            <Paragraph>\n              Кодовая база, она как здание. Если кто-то живет один,\n              в&nbsp;огромном особняке, то&nbsp;площади простаивают\n              и&nbsp;приносят убыток. Ведь за&nbsp;них надо платить:\n              за&nbsp;коммуналку, за&nbsp;тепло, за&nbsp;уборку. В&nbsp;коде это\n              сложность понимания, возможные баги, затраты на&nbsp;тестирование.\n              Каждая, как лишняя, так и&nbsp;нужная инструкция требует свою\n              арендную плату. Такая ситуация может возникнуть и&nbsp;когда\n              в&nbsp;большом доме жило много жильцов, а&nbsp;потом часть\n              разъехались, т.е. какая-то функциональность стала не&nbsp;нужна.\n              Дом, конечно, не&nbsp;стоит сносить, но&nbsp;можно подумать\n              о&nbsp;размене. Неиспользуемый код&nbsp;же надо удалять,\n              безусловно и&nbsp;хладнокровно. В&nbsp;конце-концов, старый код\n              остается в истории системы контроля версий.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Readability counts.\n              <AdditionalInfo>Читаемость имеет значение.</AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              Уже многое сказано про&nbsp;то, что код пишут один раз,\n              а&nbsp;читают десять раз. Поэтому, если нашелся способ написать\n              код понятнее, но&nbsp;он противоречит одной из&nbsp;принятых\n              в&nbsp;вашей команде практик, то предпочтительнее разово\n              отказаться от&nbsp;практики.\n            </Paragraph>\n            <Paragraph>\n              Упомяну и&nbsp;комментарии в&nbsp;коде. Комментарии нужно писать\n              только если без них никак. Хороший код объясняет сам себя,\n              а&nbsp;костыли и воркараунды редко удается понять с&nbsp;первого\n              взгляда, вот они и требуют дополнительных разъяснений. Поэтому,\n              даже уместные комментарии являются признаком костылей.\n            </Paragraph>\n            <Paragraph>\n              Но&nbsp;это нормально. Не&nbsp;страшно признаться в&nbsp;написании\n              костыля. Тот кто будет работать с&nbsp;таким кодом все равно\n              увидит его сущность. Зато, прочитав в&nbsp;комментарии\n              о&nbsp;причинах и&nbsp;области, на&nbsp;которую стоит обратить\n              внимание, следующий программист скорее почувствует благодарность\n              взамен раздражения. Объяснение сэкономит ему время\n              на&nbsp;понимание кода, отладку и&nbsp;продумывание тест-кейсов.\n            </Paragraph>\n            <Paragraph>\n              Большой минус у&nbsp;комментариев в&nbsp;коде в&nbsp;том, что они\n              устаревают. Слишком часто при внесении правок в&nbsp;код забывают\n              проверить сопутствующие комментарии. Этого недостатка лишены\n              комментарии к коммитам.\n            </Paragraph>\n            <Paragraph>\n              У&nbsp;комментариев к&nbsp;коммитам есть прекрасные свойства,\n              отличающие их от&nbsp;комментариев к&nbsp;коду: они\n              не&nbsp;загромождают код и&nbsp;они всегда актуальны, потому что\n              они привязаны к&nbsp;моменту коммита. И&nbsp;если код будет стерт,\n              то&nbsp;и&nbsp;аннотацию к&nbsp;нему уже никто не&nbsp;увидит.\n            </Paragraph>\n            <Paragraph>\n              Описывайте в&nbsp;комментах к&nbsp;коммиту, какие решения\n              вы&nbsp;рассмотрели, почему приняли одно и&nbsp;отвергли другие.\n              Какие особые случаи учтены в&nbsp;ваших правках. Полезно добавлять\n              ссылки на&nbsp;ишью, макет. Можно даже скопировать переписку\n              по&nbsp;теме с&nbsp;коллегами. Описание того что сделано\n              в&nbsp;коммите не&nbsp;так важно, потому что обычно это и&nbsp;так\n              понятно из&nbsp;изменений и&nbsp;должно быть понятно\n              из&nbsp;задачи, ссылка на которую обязательно должна\n              присутствовать. Лично я&nbsp;оставляю описание в&nbsp;заголовке,\n              чтобы коммит было проще было найти в&nbsp;списке или можно\n              скопировать заголовки для отчета о&nbsp;проделанной работе.\n            </Paragraph>\n            <Example description=\"плохой комментарий к коммиту\">\n              Однажды я&nbsp;правил баг верстки и&nbsp;нашел, что для его\n              исправления достаточно удалить одну строку. С&nbsp;этим\n              я&nbsp;разобрался за&nbsp;15&nbsp;минут. В блейме, в&nbsp;коммите\n              с&nbsp;этой строкой, было написано &laquo;фикс верстки&raquo;. Еще\n              два часа я&nbsp;искал, какую верстку и&nbsp;в&nbsp;каком браузере\n              фиксит та строка и&nbsp;не&nbsp;нашел. Так ее&nbsp;и&nbsp;удалил.\n              Мораль: 1&nbsp;минута при коммите может сэкономить два часа\n              отладки. Даже если пригодится только каждый 120\n              коммит&nbsp;&mdash; кто-то не&nbsp;испытает боль, может\n              и&nbsp;вы&nbsp;сами. А значит мир станет чуточку лучше.\n            </Example>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Special cases aren&rsquo;t special enough to&nbsp;break the rules.\n              <AdditionalInfo>\n                Особые случаи не&nbsp;настолько особые, чтобы нарушать правила.\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              Количество проблем и&nbsp;боли в&nbsp;приложении пропорционально\n              его сложности. Сложность&nbsp;же растет с&nbsp;каждым исключением\n              из&nbsp;правил. Это касается и&nbsp;бизнес-логики, и&nbsp;трюков\n              с&nbsp;языком программирования, и организации приложения.\n              Например, если все утилиты лежат в&nbsp;одной папке, но&nbsp;еще\n              несколько в&nbsp;другой&nbsp;&mdash; это тоже сложно. Поэтому, при\n              соблазне сделать исключение, подумайте хорошенько, можно&nbsp;ли\n              обойтись общим правилом или разумно будет внести правку\n              в&nbsp;общий код, чтобы в&nbsp;него гармонично уложилась\n              и&nbsp;новая логика. Если исключения вам подбросили дизайнеры или\n              продакт-менеджер &mdash; обсудите их&nbsp;отдельно, укажите\n              на&nbsp;их&nbsp;цену. Конечно, совсем без исключений\n              не&nbsp;обойтись, однако важно понять, стоит&nbsp;ли овчинка\n              выделки.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Although practicality beats purity.\n              <AdditionalInfo>\n                При этом практичность важнее безупречности.\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              Выполнять все правила невозможно, не&nbsp;хватит времени\n              и&nbsp;сил. Фанатичное стремление к&nbsp;идеалу&nbsp;&mdash;\n              недостаток для хорошего инженера. Поэтому иногда правила можно\n              нарушать, особенно, если понятно, зачем вы&nbsp;это делаете\n              и&nbsp;можете объяснить другим.\n            </Paragraph>\n            <Paragraph>\n              Люди важнее технологий. Всех не&nbsp;заставишь мыслить одинаково.\n              Иногда надо давать людям допускать ошибки и&nbsp;учиться\n              на&nbsp;них. А иногда может оказаться, что заблуждение было\n              на&nbsp;вашей стороне. Если у&nbsp;вас есть супер-правило,\n              супер-подход или еще что-то, но команда его не&nbsp;приняла,\n              то&nbsp;и&nbsp;фиг с&nbsp;ним!\n            </Paragraph>\n            <Paragraph>\n              Правила нужны не&nbsp;потому что они самые правильные\n              и&nbsp;истина в последней инстанции, а&nbsp;потому что они для\n              всех одни. Гребем под одну гребёнку и&nbsp;создаём конвейер,\n              повышая производительность труда. Из&nbsp;правил, прошедших\n              конкурентный отбор вырастают лучшие практики.\n            </Paragraph>\n            <Paragraph>\n              И&nbsp;все&nbsp;же, костыли лучше писать изолированно\n              и&nbsp;инкапсулировано, где-нибудь в&nbsp;отдельном методе,\n              желательно с&nbsp;пометкой unsafe. Тогда в&nbsp;лучшие времена\n              можно будет отрезать ниточку ведущую к&nbsp;плохому коду\n              и&nbsp;привязать новое блестящее решение.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Errors should never pass silently.\n              <AdditionalInfo>\n                Ошибки никогда не&nbsp;должны замалчиваться.\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <ParagraphTitleWithCounter>\n              Unless explicitly silenced.\n              <AdditionalInfo>Если не&nbsp;замалчиваются явно.</AdditionalInfo>\n            </ParagraphTitleWithCounter>\n            <Paragraph>\n              Про обработку ошибок обычно думают в&nbsp;последнюю очередь\n              и&nbsp;делают абы как. А&nbsp;без корректной обработки проект\n              получается разбалансированным. Мой совет&nbsp;&mdash; уделить\n              дополнительное время и разработать надежную и&nbsp;удобную систему\n              обработки ошибок в приложении.\n            </Paragraph>\n            <Paragraph>\n              Самый опасный порок&nbsp;&mdash; это замалчивание ошибок, когда\n              приложение столкнувшись с&nbsp;непредусмотренной ситуацией\n              продолжает работу, хотя известно, что в&nbsp;стейте у&nbsp;него\n              некорректные данные.\n            </Paragraph>\n            <Paragraph>\n              Можно исправлять ошибочные данные на&nbsp;безопасные дефолтные\n              значения, но&nbsp;это тоже путь к&nbsp;непредсказуемому\n              и&nbsp;ошибочному поведению.\n            </Paragraph>\n            <Paragraph>\n              Разумный, хоть и&nbsp;болезненный путь&nbsp;&mdash; это fast fail,\n              когда состояние приложения проверяется на&nbsp;консистентность\n              в&nbsp;каждом значимом узле, а&nbsp;при обнаружении ошибки\n              выбрасывается исключение. Так большинство проблем будут обнаружены\n              на&nbsp;этапах отладки и&nbsp;тестирования. Недостаток\n              у&nbsp;этого подхода в&nbsp;том, что он&nbsp;снижает надежность\n              работы приложения, и&nbsp;иногда несущественные проблемы будут\n              вызывать креш на&nbsp;стороне пользователя.\n            </Paragraph>\n            <Paragraph>\n              Таким образом, для важного кода, вроде расчета стоимости услуги,\n              скорее должен быть применен fast-fail. А&nbsp;для несущественного,\n              вроде расчета анимации, можно явно перехватить исключение и\n              прекратить его распространение. Какой участок кода важный,\n              а&nbsp;какой нет&nbsp;&mdash; следует определять\n              по&nbsp;требованиям со&nbsp;стороны архитектуры и бизнес-логики.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              In&nbsp;the face of&nbsp;ambiguity, refuse the temptation\n              to&nbsp;guess.\n              <AdditionalInfo>\n                Встретив двусмысленность, отбрось искушение угадать.\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>\n              Следует избегать любой двусмысленности в&nbsp;коде. Не&nbsp;стоит\n              использовать слишком общие имена переменных. Самый яркий пример -\n              &laquo;data&raquo;. Оно означает все и&nbsp;ничего одновременно.\n              Это индикатор того, что автор сам до&nbsp;конца не&nbsp;продумал,\n              что происходит в рассматриваемом участке кода. Вместо\n              &laquo;data&raquo; нужно точно и однозначно указать, какая\n              сущность используется.\n            </Paragraph>\n            <Paragraph>\n              В&nbsp;проекте не&nbsp;должны использоваться переменные\n              с&nbsp;одинаковым названием для разных сущностей бизнес-логики. И,\n              наоборот, одинаковые сущности бизнес-логики должны храниться\n              в&nbsp;переменных с одинаковыми названиями, пусть даже\n              в&nbsp;не&nbsp;связанных участках системы. Это очень упростит\n              рефакторинг и&nbsp;поиск по&nbsp;проекту.\n            </Paragraph>\n            <Paragraph>\n              В&nbsp;коде, имеющем дело с&nbsp;бизнес-логикой не&nbsp;следует\n              использовать названия переменных вроде &laquo;value&raquo;,\n              &laquo;file&raquo;, &laquo;list&raquo;. Используйте конкретные\n              термины, понятные продакт-менеджеру: &laquo;lastnameValue&raquo;,\n              &laquo;monthlySalesReportFile&raquo;, &laquo;flightsList&raquo;.\n            </Paragraph>\n            <Paragraph>\n              &laquo;value&raquo;, &laquo;file&raquo;, &laquo;list&raquo;\n              допустимы в&nbsp;абстрактном коде, когда речь идет действительно\n              о&nbsp;произвольном значении или файле. Естественно,\n              не&nbsp;следует смешивать код, оперирующий абстрактными понятиями,\n              и код про бизнес-логику.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              There should be&nbsp;one&nbsp;&mdash; and preferably only\n              one&nbsp;&mdash; obvious way to&nbsp;do it.\n              <AdditionalInfo>\n                Должен существовать один&nbsp;&mdash; и, желательно, только один\n                &mdash; очевидный способ сделать это.\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <ParagraphTitleWithCounter>\n              Although that way may not be&nbsp;obvious at&nbsp;first unless\n              you&rsquo;re Dutch*.\n              <AdditionalInfo>\n                Хотя он&nbsp;поначалу может быть и&nbsp;не&nbsp;очевиден, если\n                вы&nbsp;не голландец.*\n                <AdditionalInfo>\n                  *Шутливый намек на&nbsp;создателя Питона.\n                </AdditionalInfo>\n              </AdditionalInfo>\n            </ParagraphTitleWithCounter>\n            <Paragraph>\n              При разработке программного обеспечения постоянно приходится\n              принимать решения: какую выбрать технологию; использовать&nbsp;ли\n              библиотеку или написать велосипед; как назвать переменную, которая\n              описывает надбавку на&nbsp;скидку за&nbsp;третью покупку\n              дополнительной услуги в&nbsp;статусе премиум. Иногда\n              на&nbsp;ум&nbsp;ничего не&nbsp;приходит. Иногда сразу несколько\n              решений. Иногда программист видит только одно решение\n              и&nbsp;принимает его.\n            </Paragraph>\n            <Paragraph>\n              Если решений нет, все просто&nbsp;&mdash; их&nbsp;надо искать.\n              В&nbsp;крайнем случае, не&nbsp;решать проблему&nbsp;&mdash; тоже\n              решение.\n            </Paragraph>\n            <Paragraph>\n              Если в&nbsp;голову пришло только одно единственное решение, уже\n              неплохо. Но, как показывает практика, редко когда это первое и\n              единственное &laquo;наивное&raquo; решение обходится без\n              недостатков.\n            </Paragraph>\n            <Paragraph>\n              Поэтому, хорошей тактикой может быть не&nbsp;останавливаться\n              на&nbsp;первом решении, но&nbsp;попробовать найти альтернативы.\n              Особенно это актуально для сложных задач. И&nbsp;уже\n              сравнив&nbsp;их, обратив внимание на преимущества\n              и&nbsp;недостатки каждого решения, выбрать наилучшее, исходя\n              из&nbsp;знаний и&nbsp;принятых практик. После такого анализа\n              с&nbsp;учетом найденных при сравнении и&nbsp;обдумывании\n              аргументов должно выделиться &laquo;очевидное&raquo; решение.\n            </Paragraph>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Now is&nbsp;better than never.\n              <AdditionalInfo>Сейчас лучше, чем никогда.</AdditionalInfo>\n            </ParagraphTitle>\n            <ParagraphTitleWithCounter>\n              Although never is&nbsp;often better than *right* now.\n              <AdditionalInfo>\n                Хотя никогда зачастую лучше, чем прямо сейчас.\n              </AdditionalInfo>\n            </ParagraphTitleWithCounter>\n            <Paragraph>\n              Этот пункт про небольшие порции технического долга, при встрече с\n              которыми обыкновенно возникает желание записать\n              их&nbsp;в&nbsp;todo.\n            </Paragraph>\n            <Paragraph>\n              Все, что важно, но&nbsp;хочется отложить, из-за давления, сроков,\n              усталости, лучше сделать прямо сейчас, в&nbsp;рамках задачи.\n              Потому что, в&nbsp;большинстве случаев, потом\n              означает&nbsp;&mdash; никогда.\n            </Paragraph>\n            <Paragraph>\n              Однако следует с&nbsp;большой щепетильностью\n              и&nbsp;пристрастностью отнестись к&nbsp;определению того, что\n              действительно важно. И&nbsp;волевым решением навсегда отказаться\n              от&nbsp;всех сомнительных задач. В&nbsp;идеале, к&nbsp;моменту\n              коммита, все todo должны быть разрешены или отброшены.\n            </Paragraph>\n            <Example>\n              // todo: сделать нормально, на&nbsp;следующей неделе.\n            </Example>\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              If&nbsp;the implementation is&nbsp;hard to&nbsp;explain,\n              it&rsquo;s a&nbsp;bad idea.\n              <AdditionalInfo>\n                Если реализацию сложно объяснить&nbsp;&mdash; идея плоха.\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <ParagraphTitleWithCounter>\n              If&nbsp;the implementation is&nbsp;easy to&nbsp;explain,\n              it&nbsp;may be&nbsp;a&nbsp;good idea.\n              <AdditionalInfo>\n                Если реализацию легко объяснить&nbsp;&mdash; идея, возможно,\n                хороша.\n              </AdditionalInfo>\n            </ParagraphTitleWithCounter>\n            <Paragraph>\n              Если идею трудно объяснить, то&nbsp;ее&nbsp;впоследствии будет\n              трудно понять, даже хорошо написанный код останется сложным для\n              понимания. Другими словами пострадает читабельность, чего&nbsp;бы\n              хотелось избежать. Поэтому, чем сложнее формализовать идею, тем\n              важнее это сделать. По&nbsp;ходу дела можно найти либо способы ее\n              упрощения, либо оставить описание в&nbsp;качестве документации.\n            </Paragraph>\n            <Paragraph>\n              Одна голова хорошо, а&nbsp;две лучше. Дождитесь пока у&nbsp;вашего\n              коллеги освободится минутка и&nbsp;проговорите с&nbsp;ним идею:\n              незамыленный взгляд поможет найти явные недостатки,\n              да&nbsp;и&nbsp;сами лучше во&nbsp;всем разберетесь.\n            </Paragraph>\n            <Paragraph />\n          </ChapterWithCounter>\n          <ChapterWithCounter>\n            <ParagraphTitle>\n              Namespaces are one honking great idea&nbsp;&mdash; let&rsquo;s\n              do&nbsp;more of&nbsp;those!\n              <AdditionalInfo>\n                Пространства имён&nbsp;&mdash; отличная вещь! Давайте будем\n                делать их больше!\n              </AdditionalInfo>\n            </ParagraphTitle>\n            <Paragraph>Какие хорошие идеи есть у&nbsp;вас?</Paragraph>\n          </ChapterWithCounter>\n        </ChaptersList>\n        <ParagraphTitle>Заключение.</ParagraphTitle>\n        <Paragraph>\n          Мне вся эта философия помогает не&nbsp;скатываться в&nbsp;говнокод.\n          Ведь как обычно: надо спешить, некогда думать, делай давай. Держа эти\n          принципы в&nbsp;голове я&nbsp;могу отличить правильное решение\n          от&nbsp;неправильного. А&nbsp;зная, что правильно, я&nbsp;могу\n          отстоять свое мнение перед менеджером и обосновать время\n          на&nbsp;проектирование и&nbsp;на&nbsp;решение проблем тех долга.\n        </Paragraph>\n        <Paragraph>\n          Желаю и&nbsp;вам найти свои приемы, чтобы справиться со&nbsp;Сциллами\n          и Харибдами на&nbsp;нелегком пути разработчика к&nbsp;качественному\n          и&nbsp;любимому продукту.\n        </Paragraph>\n        <Paragraph>\n          Для более подробного погружения в&nbsp;тему, рекомендую книги\n          признанных авторитетов,{' '}\n          <a href=\"https://www.ozon.ru/context/detail/id/5011068/\">\n            &laquo;Чистый Код&raquo;\n          </a>{' '}\n          Роберта Мартина или{' '}\n          <a href=\"https://www.ozon.ru/context/detail/id/142768363/\">\n            &laquo;Совершенный Код&raquo;\n          </a>{' '}\n          Стива Макконела.\n        </Paragraph>\n      </main>\n    </Container>\n  );\n}\n\nexport default ImportThis;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\n\nexport const Container = ({ children }) => (\n  <>\n    <Helmet>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Lora:700|Merriweather:400,400i&amp;subset=cyrillic\"\n        rel=\"stylesheet\"\n      />\n    </Helmet>\n    <Article>{children}</Article>\n  </>\n);\n\nexport const Header = styled.header`\n  font-family: 'Lora', serif;\n`;\n\nexport const Article = styled.article`\n  max-width: 720px;\n  margin: 0 auto;\n`;\n\nexport const Paragraph = styled.div`\n  margin-bottom: 12px;\n  line-height: 1.5;\n`;\n\nexport const ParagraphTitle = styled.h3`\n  font-family: 'Lora', serif;\n  font-size: 1.17em;\n  font-weight: bold;\n`;\n\nexport const ParagraphTitleWithCounter = styled(ParagraphTitle)`\n  counter-increment: chapter;\n  position: relative;\n  &::before {\n    content: counter(chapter) '. ';\n    position: absolute;\n    left: 0;\n  }\n`;\n\nexport const AdditionalInfo = styled.div`\n  color: gray;\n  font-size: 0.75em;\n`;\n\nexport const Reference = styled(AdditionalInfo)`\n  height: 0;\n  text-align: right;\n  & > a {\n    margin-right: 4px;\n  }\n`;\n\nconst StyledBlockTitle = styled.h4`\n  background-color: #fff;\n  display: inline-block;\n  margin: 12px 12px 0 28px;\n  padding: 0 2px;\n  position: relative;\n  top: 12px;\n`;\n\nconst StyledBlockBody = styled.blockquote`\n  border-radius: 2px;\n  border: 1px solid #212121;\n  margin: 0 auto;\n  padding: 16px 8px 8px 28px;\n`;\n\nconst nodeOrStringPropType = PropTypes.oneOfType([\n  PropTypes.node,\n  PropTypes.string,\n]);\n\nconst Block = ({ children, title }) => (\n  <Paragraph>\n    <StyledBlockTitle>{title}</StyledBlockTitle>\n    <StyledBlockBody>{children}</StyledBlockBody>\n  </Paragraph>\n);\nBlock.propTypes = {\n  children: nodeOrStringPropType.isRequired,\n  title: nodeOrStringPropType.isRequired,\n};\n\nexport const Quote = ({ children }) => (\n  <Block title=\"Цитата\">\n    <em>{children}</em>\n  </Block>\n);\nQuote.propTypes = {\n  children: nodeOrStringPropType.isRequired,\n};\n\nexport const Guidance = ({ children }) => (\n  <Block title=\"Действие\">{children}</Block>\n);\nGuidance.propTypes = {\n  children: nodeOrStringPropType.isRequired,\n};\n\nexport const Example = ({ children, description }) => (\n  <Block title={description ? `Пример: ${description}` : 'Пример'}>\n    {children}\n  </Block>\n);\nExample.propTypes = {\n  description: PropTypes.string,\n  children: nodeOrStringPropType.isRequired,\n};\nExample.defaultProps = {\n  description: '',\n};\n\nexport const Footnote = ({ children }) => (\n  <Block title=\"Примечание\">{children}</Block>\n);\nFootnote.propTypes = {\n  children: nodeOrStringPropType.isRequired,\n};\n\nexport const ChaptersList = styled.ol`\n  margin: 36px 0 0;\n  padding: 0;\n  list-style: none;\n  counter-reset: chapter;\n`;\n\nexport const Chapter = styled.li`\n  margin-bottom: 72px;\n  ${ParagraphTitle}, ${ParagraphTitleWithCounter} {\n    padding-left: 24px;\n  }\n  ${Paragraph} {\n    padding-left: 24px;\n  }\n`;\n\nexport const ChapterWithCounter = styled(Chapter)`\n  counter-increment: chapter;\n  position: relative;\n  &::before {\n    content: counter(chapter) '. ';\n    position: absolute;\n    left: 0;\n    font-family: 'Lora', serif;\n    font-size: 1.17em;\n    font-weight: bold;\n  }\n`;\n\nexport const Clause = styled.li`\n  margin-bottom: 12px;\n`;\n\nexport const OrderedList = styled.ol``;\n\nexport const UnorderedList = styled.ul`\n  list-style-type: none;\n  margin-right: 0;\n  padding: 0;\n  ${Clause} {\n    :before {\n      content: '–';\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const Small = styled.p`\n  font-size: 0.8em;\n`;\n\nconst VideoContainer = styled.div`\n  position: relative;\n  padding-bottom: 56.25%; /* 16:9 */\n  padding-top: 25px;\n  height: 0;\n`;\nconst VideoContent = styled.iframe`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const YoutubeVideo = ({ youtubeId }) => (\n  <VideoContainer>\n    <VideoContent\n      src={`https://www.youtube.com/embed/${youtubeId}`}\n      frameBorder=\"0\"\n    />\n  </VideoContainer>\n);\n"],"sourceRoot":""}