import React from 'react';
import {
  Chapter,
  ChaptersList,
  ChapterWithCounter,
  Container,
  Example,
  Header,
  Paragraph,
  ParagraphTitle,
  ParagraphTitleWithCounter,
  Quote,
  AdditionalInfo,
  Reference,
  YoutubeVideo,
} from './themeComponents/lora';

function ImportThis() {
  return (
    <Container>
      <Header>
        <Reference>
          По мотивам корпоративного выступления от 08.08.2019
        </Reference>
        <h1>import this</h1>
        <h3>
          19 принципов достижения Дзена при написании компьютерных программ
        </h3>
      </Header>
      <main>
        <Paragraph>
          Хороший код — понятие субъективное. Я приписываю ему два основных
          качества: его должно быть легко понять и в него должно быть легко
          внести изменения. Таким образом, хороший код остается легко
          дорабатываемым. Это качество высоко оценят и заказчик и
          коллеги-программисты. В этой статье я делюсь своими подходами к
          написанию кода.
        </Paragraph>
        <ChaptersList>
          <Chapter>
            <ParagraphTitle>Import this.</ParagraphTitle>
            <Paragraph>
              Если вы работали с Питоном, то возможно слышали про пасхалку из
              заголовка статьи. Если выполнить в стандартном интерпретаторе
              Питона import this, то будет выведен девиз из девятнадцати
              предложений, называемый Zen of Python.
              <YoutubeVideo youtubeId="8BvOfsMN8bI" />
            </Paragraph>
            <Paragraph>
              Пусть эти постулаты несколько туманны и даже порой противоречивы,
              мне они все равно нравятся, за то, что наводят на размышления из
              которых можно вывести более четкие правила.
            </Paragraph>
          </Chapter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Beautiful is better than ugly.
              <AdditionalInfo>Красивое лучше, чем уродливое.</AdditionalInfo>
            </ParagraphTitle>
            <Quote>
              &laquo;Некрасивое решение — точно неправильное. Красивое –
              возможно правильное.&raquo;
            </Quote>
            <Paragraph>
              К сожалению, не вспомнил автора афоризма. В оригинале имелась
              ввиду математическая задача, но не вижу препятствий, в применении
              цитаты к решениям в разработке ПО. Перефразируя, если вы нашли
              решение, но оно вас смущает по эстетическим причинам, то наверняка
              можно найти более ловкий подход или хотя бы попытаться это
              сделать.
            </Paragraph>
            <Paragraph>
              В коде следует избегать избыточных действий и информации. Иногда
              лишняя информация не совсем очевидна. Например, если ваши данные
              неупорядоченны, то некрасиво использовать их для хранения массив.
            </Paragraph>
            <Paragraph>
              Сам массив (не кортеж), обыкновенно подразумевает обращение к его
              элементам путем перебора. Поэтому обращение к элементу массива по
              индексу выглядит некрасиво и вероятно свидетельствует о неудачном
              архитектурном решении.
            </Paragraph>
            <Paragraph>
              Еще я пользуюсь принципом, который назвал про себя принципом
              симметрии, полагаю у него есть и нормальное, научное, название. Он
              о том, что если два понятия находятся на одном уровне абстракции,
              то обращения к ним должны происходить схожим образом. В противном
              случае, в коде одно или несколько из таких обращений начинают
              обрабатываться как исключительные ситуации, что не есть хорошо. Но
              об этом чуть позже.
            </Paragraph>
            {/*<Example description="симметрия">*/}
            {/* hotels/:id и hotels/something/unrelated*/}
            {/*</Example>*/}
            {/*<Example description="симметрия">*/}
            {/*  Допустим у нас была переменная discount в которой мы хранили скиду*/}
            {/*  в рублях, а потом дополнительно решили ввести скидку в процентах и*/}
            {/*  назвали ее discountInPercent. Тогда нужно не забыть переименовать*/}
            {/*  discount в discountInRouble.*/}
            {/*</Example>*/}
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Explicit is better than implicit.
              <AdditionalInfo>Явное лучше, чем неявное.</AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              Кажется это уже притча во языцех. Но все-таки в программистах, в
              том числе и во мне, живет непреодолимое стремление сделать
              какой-нибудь трюк в коде. Считается, что знание всяких квирков это
              индикатор знания языка. Возможно, по количеству изученных хаков
              удобно отсекать соискателей на собеседовании, но я бы поспорил с
              практичностью этого подхода.
            </Paragraph>
            <Paragraph>
              По крайней мере в прикладном коде они крайне нежелательны, т.к.
              скорее напоминают архивирование, а не оптимизацию. И коллеги,
              прежде чем смогут приняться за полезную работу, будут обречены на
              распаковку оригинальных идей, спрятанных за необычными
              комбинациями операторов.
            </Paragraph>
            <Paragraph>
              Если язык или библиотека дают вам возможность что-то сделать
              неявно, стоит подумать дважды, прежде чем пользоваться этим. Ведь
              для ваших коллег, да и скорее всего для вас в будущем, смысл
              происходящего тоже станет неявен. И придется потратить время на
              разбирательства.
            </Paragraph>
            <Paragraph>
              Использование значения по умолчанию – это тоже про неявное
              присваивание. Проблема в том, что не всегда понятно, соответствует
              ли такое поведение замыслу программиста или он просто забыл
              передать соответствующий параметр.
            </Paragraph>
            <Paragraph>
              Есть конечно и исключения из этого правила, которые продиктованы
              здравым смыслом. Например контекст. Контекст используется, чтобы
              не передавать ссылки через нескольких посредников. При разумном
              использовании это делает код более кратким, емким и надежным. И
              это преимущество контекста перевешивает издержки от его неявной
              сути.
            </Paragraph>
            <Paragraph>
              Тем не менее, можно проследить, как контекст остается в поле
              сакральных знаний о проекте. Например, если мы передаем в
              контексте сведения об используемом устройстве, новичок в проекте
              может не заметить этого и продублировать вычисления в своем
              компоненте.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Simple is better than complex.
              <AdditionalInfo>Простое лучше, чем сложное.</AdditionalInfo>
            </ParagraphTitle>
            <ParagraphTitleWithCounter>
              Complex is better than complicated.
              <AdditionalInfo>Сложное лучше, чем запутанное.</AdditionalInfo>
            </ParagraphTitleWithCounter>
            <Paragraph>
              Согласно{' '}
              <a href="https://www.ozon.ru/context/detail/id/142768363/">
                Стивену Макконелу
              </a>
              , главный принцип разработки ПО – это управление сложностью.
              Сложность и непредсказуемость окружающего мира передается
              бизнес-правилам. Без контроля она выйдет за рамки когнитивных
              способностей человека. То есть взорвет исполнителю мозг, т.к. есть
              предел у количества информации, которой можно оперировать в один
              момент времени.
            </Paragraph>
            <Paragraph>
              Не уследив за сложностью, приходится тратить драгоценное время на
              разбор багов, разбор полетов или разработку безопасных
              воркараундов. А воркараунды порочным кругом ведут к росту
              сложности проекта. Фичи пилятся медленнее, баги все более
              запутанные и всем от этого грустно.
            </Paragraph>
            <Paragraph>
              Поэтому, со сложностью надо бороться. Следить за связностью и
              зацеплением. Вместо методов Бога, состоящих из сотен строк,
              использовать небольшие, связанные методы, на понимание которых
              требуется минимальное время, а также выносить в отдельные модули
              утилиты, компоненты.
            </Paragraph>
            <Paragraph>
              Стоит подумать о том, насколько обширна область, в которую
              придется погрузиться вашим коллегам, когда придет их очередь
              работать с вашим кодом. Это и объем кода, и сущности которые в нем
              описаны. Можно сузить область, выделив сущности в отдельные пакеты
              и подготовив АПИ для использования их в основной части приложения.
            </Paragraph>
            <Paragraph>
              Кроме борьбы со сложностью в коде, боритесь с ней и в
              бизнес-логике. Все равно, бизнес-логика это карта и она не станет
              территорией. Но каждая дополнительная деталь стоит времени и
              денег. Иногда это оправданно, иногда нет, ваш продакт-менеджер как
              раз и занимается тем, что определяет, какой участок детализировать
              следующим. У вас с ним одна цель — качественный продукт. И если вы
              вместе найдете способ уменьшить сложность бизнес-логики - выиграют
              все.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Flat is better than nested.
              <AdditionalInfo>Плоское лучше, чем вложенное.</AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              В иерархических структурах кажется хорошей идеей рассматривать
              только два уровня за раз. Это относится и к ветвлению в коде, и к
              декомпозиции объектов. Глубокая вложенность – это сигнал, что на
              данном участке кода сконцентрирована излишняя сложность.
            </Paragraph>
            <Paragraph>
              Когда в коде встречается ветвление глубиной больше чем один
              уровень, то стоит подумать о рефакторинге и вынести вложенные
              инструкции в отдельный метод.
            </Paragraph>
            <Paragraph>
              Обращение к полям объекта, вложенным на нескольких уровнях — может
              быть сигналом о чрезмерно разросшейся сущности или о том, что
              метод пытается работать с разными уровнями абстракции.
            </Paragraph>
            <Paragraph>
              Обращение к полю поля класса, это подозрительно и ненадежно,
              следует подумать о создании геттера.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Sparse is better than dense.
              <AdditionalInfo>Разреженное лучше, чем плотное.</AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              В моей интерпретации это правило о том, что не надо стараться
              уместить как можно больше логики в одну конструкцию. Наоборот,
              следует каждый шаг вычисления выделять в отдельное выражение. Тем
              более не стоит экономить на строках или символах в коде. Это
              перекликается и с предыдущим тезисом про плоскую структуру.
            </Paragraph>
            <Paragraph>
              Есть одна вещь которую программисту стоит любить больше, чем
              писать код – это удалять код. Я бы считал причастившимися к Дзену
              тех программистов, у которых удаление собственного кода вызывает
              не сожаление, а удовлетворение и чувство хорошо сделанной работы.
            </Paragraph>
            <Paragraph>
              Кодовая база, она как здание. Если кто-то живет один, в огромном
              особняке, то площади простаивают и приносят убыток. Ведь за них
              надо платить: за коммуналку, за тепло, за уборку. В коде это
              сложность понимания, возможные баги, затраты на тестирование.
              Каждая, как лишняя, так и нужная инструкция требует свою арендную
              плату. Такая ситуация может возникнуть и когда в большом доме жило
              много жильцов, а потом часть разъехались, т.е. какая-то
              функциональность стала не нужна. Дом, конечно, не стоит сносить,
              но можно подумать о размене. Неиспользуемый код же надо удалять,
              безусловно и хладнокровно. В конце-концов, старый код остается в
              истории системы контроля версий.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Readability counts.
              <AdditionalInfo>Читаемость имеет значение.</AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              Уже многое сказано про то, что код пишут один раз, а читают десять
              раз. Поэтому, если нашелся способ написать код понятнее, но он
              противоречит одной из принятых в вашей команде практик, то
              предпочтительнее разово отказаться от практики.
            </Paragraph>
            <Paragraph>
              Упомяну и комментарии в коде. Комментарии нужно писать только если
              без них никак. Хороший код объясняет сам себя, а костыли и
              воркараунды редко удается понять с первого взгляда, вот они и
              требуют дополнительных разъяснений. Поэтому, даже уместные
              комментарии являются признаком костылей.
            </Paragraph>
            <Paragraph>
              Но это нормально. Не страшно признаться в написании костыля. Тот
              кто будет работать с таким кодом все равно увидит его сущность.
              Зато, прочитав в комментарии о причинах и области, на которую
              стоит обратить внимание, следующий программист скорее почувствует
              благодарность взамен раздражения. Объяснение сэкономит ему время
              на понимание кода, отладку и продумывание тест-кейсов.
            </Paragraph>
            <Paragraph>
              Большой минус у комментариев в коде в том, что они устаревают.
              Слишком часто при внесении правок в код забывают проверить
              сопутствующие комментарии. Этого недостатка лишены комментарии к
              коммитам.
            </Paragraph>
            <Paragraph>
              У комментариев к коммитам есть прекрасные свойства, отличающие их
              от комментариев к коду: они не загромождают код и они всегда
              актуальны, потому что они привязаны к моменту коммита. И если код
              будет стерт, то и аннотацию к нему уже никто не увидит.
            </Paragraph>
            <Paragraph>
              Описывайте в комментах к коммиту, какие решения вы рассмотрели,
              почему приняли одно и отвергли другие. Какие особые случаи учтены
              в ваших правках. Полезно добавлять ссылки на ишью, макет. Можно
              даже скопировать переписку по теме с коллегами. Описание того что
              сделано в коммите не так важно, потому что обычно это и так
              понятно из изменений и должно быть понятно из задачи, ссылка на
              которую обязательно должна присутствовать. Лично я оставляю
              описание в заголовке, чтобы коммит было проще было найти в списке
              или можно скопировать заголовки для отчета о проделанной работе.
            </Paragraph>
            <Example description="плохой комментарий к коммиту">
              Однажды я правил баг верстки и нашел, что для его исправления
              достаточно удалить одну строку. С этим я разобрался за 15 минут. В
              блейме, в коммите с этой строкой, было написано «фикс верстки».
              Еще два часа я искал, какую верстку и в каком браузере фиксит та
              строка и не нашел. Так ее и удалил. Мораль: 1 минута при коммите
              может сэкономить два часа отладки. Даже если пригодится только
              каждый 120 коммит — кто-то не испытает боль, может и вы сами. А
              значит мир станет чуточку лучше.
            </Example>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Special cases aren't special enough to break the rules.
              <AdditionalInfo>
                Особые случаи не настолько особые, чтобы нарушать правила.
              </AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              Количество проблем и боли в приложении пропорционально его
              сложности. Сложность же растет с каждым исключением из правил. Это
              касается и бизнес-логики, и трюков с языком программирования, и
              организации приложения. Например, если все утилиты лежат в одной
              папке, но еще несколько в другой — это тоже сложно. Поэтому, при
              соблазне сделать исключение, подумайте хорошенько, можно ли
              обойтись общим правилом или разумно будет внести правку в общий
              код, чтобы в него гармонично уложилась и новая логика. Если
              исключения вам подбросили дизайнеры или продакт-менеджер —
              обсудите их отдельно, укажите на их цену. Конечно, совсем без
              исключений не обойтись, однако важно понять, стоит ли овчинка
              выделки.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Although practicality beats purity.
              <AdditionalInfo>
                При этом практичность важнее безупречности.
              </AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              Выполнять все правила невозможно, не хватит времени и сил.
              Фанатичное стремление к идеалу – недостаток для хорошего инженера.
              Поэтому иногда правила можно нарушать, особенно, если понятно,
              зачем вы это делаете и можете объяснить другим.
            </Paragraph>
            <Paragraph>
              Люди важнее технологий. Всех не заставишь мыслить одинаково.
              Иногда надо давать людям допускать ошибки и учиться на них. А
              иногда может оказаться, что заблуждение было на вашей стороне.
              Если у вас есть супер-правило, супер-подход или еще что-то, но
              команда его не приняла, то и фиг с ним!
            </Paragraph>
            <Paragraph>
              Правила нужны не потому что они самые правильные и истина в
              последней инстанции, а потому что они для всех одни. Гребем под
              одну гребёнку и создаём конвейер, повышая производительность
              труда. Из правил, прошедших конкурентный отбор вырастают лучшие
              практики.
            </Paragraph>
            <Paragraph>
              И все же, костыли лучше писать изолированно и инкапсулировано,
              где-нибудь в отдельном методе, желательно с пометкой unsafe. Тогда
              в лучшие времена можно будет отрезать ниточку ведущую к плохому
              коду и привязать новое блестящее решение.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Errors should never pass silently.
              <AdditionalInfo>
                Ошибки никогда не должны замалчиваться.
              </AdditionalInfo>
            </ParagraphTitle>
            <ParagraphTitleWithCounter>
              Unless explicitly silenced.
              <AdditionalInfo>Если не замалчиваются явно.</AdditionalInfo>
            </ParagraphTitleWithCounter>
            <Paragraph>
              Про обработку ошибок обычно думают в последнюю очередь и делают
              абы как. А без корректной обработки проект получается
              разбалансированным. Мой совет – уделить дополнительное время и
              разработать надежную и удобную систему обработки ошибок в
              приложении.
            </Paragraph>
            <Paragraph>
              Самый опасный порок – это замалчивание ошибок, когда приложение
              столкнувшись с непредусмотренной ситуацией продолжает работу, хотя
              известно, что в стейте у него некорректные данные.
            </Paragraph>
            <Paragraph>
              Можно исправлять ошибочные данные на безопасные дефолтные
              значения, но это тоже путь к непредсказуемому и ошибочному
              поведению.
            </Paragraph>
            <Paragraph>
              Разумный, хоть и болезненный путь – это fast fail, когда состояние
              приложения проверяется на консистентность в каждом значимом узле,
              а при обнаружении ошибки выбрасывается исключение. Так большинство
              проблем будут обнаружены на этапах отладки и тестирования.
              Недостаток у этого подхода в том, что он снижает надежность работы
              приложения, и иногда несущественные проблемы будут вызывать креш
              на стороне пользователя.
            </Paragraph>
            <Paragraph>
              Таким образом, для важного кода, вроде расчета стоимости услуги,
              скорее должен быть применен fast-fail. А для несущественного,
              вроде расчета анимации, можно явно перехватить исключение и
              прекратить его распространение. Какой участок кода важный, а какой
              нет – следует определять по требованиям со стороны архитектуры и
              бизнес-логики.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              In the face of ambiguity, refuse the temptation to guess.
              <AdditionalInfo>
                Встретив двусмысленность, отбрось искушение угадать.
              </AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>
              Следует избегать любой двусмысленности в коде. Не стоит
              использовать слишком общие имена переменных. Самый яркий пример -
              "data". Оно означает все и ничего одновременно. Это индикатор
              того, что автор сам до конца не продумал, что происходит в
              рассматриваемом участке кода. Вместо "data" нужно точно и
              однозначно указать, какая сущность используется.
            </Paragraph>
            <Paragraph>
              В проекте не должны использоваться переменные с одинаковым
              названием для разных сущностей бизнес-логики. И, наоборот,
              одинаковые сущности бизнес-логики должны храниться в переменных с
              одинаковыми названиями, пусть даже в не связанных участках
              системы. Это очень упростит рефакторинг и поиск по проекту.
            </Paragraph>
            <Paragraph>
              В коде, имеющем дело с бизнес-логикой не следует использовать
              названия переменных вроде "value", "file", "list". Используйте
              конкретные термины, понятные продакт-менеджеру: "lastnameValue",
              "monthlySalesReportFile", "flightsList".
            </Paragraph>
            <Paragraph>
              "value", "file", "list" допустимы в абстрактном коде, когда речь
              идет действительно о произвольном значении или файле. Естественно,
              не следует смешивать код, оперирующий абстрактными понятиями, и
              код про бизнес-логику.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              There should be one — and preferably only one — obvious way to do
              it.
              <AdditionalInfo>
                Должен существовать один — и, желательно, только один —
                очевидный способ сделать это.
              </AdditionalInfo>
            </ParagraphTitle>
            <ParagraphTitleWithCounter>
              Although that way may not be obvious at first unless you're
              Dutch*.
              <AdditionalInfo>
                Хотя он поначалу может быть и не очевиден, если вы не
                голландец.*
                <AdditionalInfo>
                  *Шутливый намек на создателя Питона.
                </AdditionalInfo>
              </AdditionalInfo>
            </ParagraphTitleWithCounter>
            <Paragraph>
              При разработке программного обеспечения постоянно приходится
              принимать решения: какую выбрать технологию; использовать ли
              библиотеку или написать велосипед; как назвать переменную, которая
              описывает надбавку на скидку за третью покупку дополнительной
              услуги в статусе премиум. Иногда на ум ничего не приходит. Иногда
              сразу несколько решений. Иногда программист видит только одно
              решение и принимает его.
            </Paragraph>
            <Paragraph>
              Если решений нет, все просто — их надо искать. В крайнем случае,
              не решать проблему – тоже решение.
            </Paragraph>
            <Paragraph>
              Если в голову пришло только одно единственное решение, уже
              неплохо. Но, как показывает практика, редко когда это первое и
              единственное "наивное" решение обходится без недостатков.
            </Paragraph>
            <Paragraph>
              Поэтому, хорошей тактикой может быть не останавливаться на первом
              решении, но попробовать найти альтернативы. Особенно это актуально
              для сложных задач. И уже сравнив их, обратив внимание на
              преимущества и недостатки каждого решения, выбрать наилучшее,
              исходя из знаний и принятых практик. После такого анализа с учетом
              найденных при сравнении и обдумывании аргументов должно выделиться
              "очевидное" решение.
            </Paragraph>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Now is better than never.
              <AdditionalInfo>Сейчас лучше, чем никогда.</AdditionalInfo>
            </ParagraphTitle>
            <ParagraphTitleWithCounter>
              Although never is often better than *right* now.
              <AdditionalInfo>
                Хотя никогда зачастую лучше, чем прямо сейчас.
              </AdditionalInfo>
            </ParagraphTitleWithCounter>
            <Paragraph>
              Этот пункт про небольшие порции технического долга, при встрече с
              которыми обыкновенно возникает желание записать их в todo.
            </Paragraph>
            <Paragraph>
              Все, что важно, но хочется отложить, из-за давления, сроков,
              усталости, лучше сделать прямо сейчас, в рамках задачи. Потому
              что, в большинстве случаев, потом означает – никогда.
            </Paragraph>
            <Paragraph>
              Однако следует с большой щепетильностью и пристрастностью
              отнестись к определению того, что действительно важно. И волевым
              решением навсегда отказаться от всех сомнительных задач. В идеале,
              к моменту коммита, все todo должны быть разрешены или отброшены.
            </Paragraph>
            <Example>// todo: сделать нормально, на следующей неделе.</Example>
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              If the implementation is hard to explain, it's a bad idea.
              <AdditionalInfo>
                Если реализацию сложно объяснить — идея плоха.
              </AdditionalInfo>
            </ParagraphTitle>
            <ParagraphTitleWithCounter>
              If the implementation is easy to explain, it may be a good idea.
              <AdditionalInfo>
                Если реализацию легко объяснить — идея, возможно, хороша.
              </AdditionalInfo>
            </ParagraphTitleWithCounter>
            <Paragraph>
              Если идею трудно объяснить, то ее впоследствии будет трудно
              понять, даже хорошо написанный код останется сложным для
              понимания. Другими словами пострадает читабельность, чего бы
              хотелось избежать. Поэтому, чем сложнее формализовать идею, тем
              важнее это сделать. По ходу дела можно найти либо способы ее
              упрощения, либо оставить описание в качестве документации.
            </Paragraph>
            <Paragraph>
              Одна голова хорошо, а две лучше. Дождитесь пока у вашего коллеги
              освободится минутка и проговорите с ним идею: незамыленный взгляд
              поможет найти явные недостатки, да и сами лучше во всем
              разберетесь.
            </Paragraph>
            <Paragraph />
          </ChapterWithCounter>
          <ChapterWithCounter>
            <ParagraphTitle>
              Namespaces are one honking great idea -- let's do more of those!
              <AdditionalInfo>
                Пространства имён — отличная вещь! Давайте будем делать их
                больше!
              </AdditionalInfo>
            </ParagraphTitle>
            <Paragraph>Какие хорошие идеи есть у вас?</Paragraph>
          </ChapterWithCounter>
        </ChaptersList>
        <ParagraphTitle>Заключение.</ParagraphTitle>
        <Paragraph>
          Мне вся эта философия помогает не скатываться в говнокод. Ведь как
          обычно: надо спешить, некогда думать, делай давай. Держа эти принципы
          в голове я могу отличить правильное решение от неправильного. А зная,
          что правильно, я могу отстоять свое мнение перед менеджером и
          обосновать время на проектирование и на решение проблем тех долга.
        </Paragraph>
        <Paragraph>
          Желаю и вам найти свои приемы, чтобы справиться со Сциллами и
          Харибдами на нелегком пути разработчика к качественному и любимому
          продукту.
        </Paragraph>
        <Paragraph>
          Для более подробного погружения в тему, рекомендую книги признанных
          авторитетов,{' '}
          <a href="https://www.ozon.ru/context/detail/id/5011068/">
            "Чистый Код"
          </a>{' '}
          Роберта Мартина или{' '}
          <a href="https://www.ozon.ru/context/detail/id/142768363/">
            "Совершенный Код"
          </a>{' '}
          Стива Макконела.
        </Paragraph>
      </main>
    </Container>
  );
}

export default ImportThis;
