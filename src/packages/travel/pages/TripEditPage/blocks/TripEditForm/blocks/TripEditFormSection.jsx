import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import Grid from '@material-ui/core/Grid';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Checkbox from '@material-ui/core/Checkbox';
import TextField from '@material-ui/core/TextField';
import OptionsSelect from 'modules/components/muiExtended/OptionsSelect';
import Suggest, { QUERY_FORMATS } from 'modules/components/muiExtended/Suggest';
import { TRIP_TYPES } from 'travel/models/trips/consts';
import { TRIP_TYPE_NAMES } from './localization';

const renderTripType = ({ option: tripType }) =>
  tripType ? TRIP_TYPE_NAMES[tripType] : 'Не указан';

export const useTripState = ({
  tripName: initialTripName,
  tripType: initialTripType,
  originLocationId: initialOriginLocationId,
  originGeonameId: initialOriginGeonameId,
}) => {
  const [tripState, setTripState] = useState({
    tripName: initialTripName,
    tripType: initialTripType,
    originLocationId: initialOriginLocationId,
    originGeonameId: initialOriginGeonameId,
  });

  return {
    tripState,
    setTripState: tripStateUpdate =>
      setTripState({ ...tripState, ...tripStateUpdate }),
  };
};

const useStyles = makeStyles({
  optionGroup: {
    display: 'flex',
    minWidth: '400px',
  },
  suggest: {
    flexGrow: 1,
  },
});

export default function TripEditFormSection({
  provision: { locationsDict = {} } = {},
  formikProps,
}) {
  const classes = useStyles();
  const {
    handleChange,
    setFieldValue,
    handleBlur,
    errors,
    touched,
    values: { trip: tripFormValues = {} },
  } = formikProps;

  const originLocation = locationsDict[tripFormValues.originLocationId];
  const { locationName } = originLocation || {};
  return (
    <Grid container={true} spacing={3} alignItems="center">
      <Grid item={true} xs={6}>
        <FormControlLabel
          control={
            <Checkbox
              fullWidth={true}
              helperText={
                touched.trip?.hasAutogeneratedTripName &&
                errors.trip?.hasAutogeneratedTripName
              }
              name="trip.hasAutogeneratedTripName"
              onBlur={handleBlur}
              onChange={handleChange}
              value={tripFormValues.hasAutogeneratedTripName}
            />
          }
          label="Автогенерируемое название"
        />
      </Grid>
      <Grid item={true} xs={6}>
        {!tripFormValues.hasAutogeneratedTripName && (
          <TextField
            className={classes.textField}
            fullWidth={true}
            helperText={touched.trip?.tripName && errors.trip?.tripName}
            label="Название поездки"
            margin="normal"
            name="trip.tripName"
            onBlur={handleBlur}
            onChange={handleChange}
            value={tripFormValues.tripName}
          />
        )}
      </Grid>
      <Grid item={true} xs={6}>
        <Suggest
          classes={{ root: classes.suggest }}
          inputProps={{ placeholder: 'Пункт отправления...' }}
          initialInputValue={locationName}
          onChange={({ suggestion: { geonameId } }) =>
            setFieldValue('trip.originGeonameId', geonameId)
          }
          onBlur={handleBlur}
          sourceProps={{
            domain: 'tripEditCard.geoname',
            modelName: 'geonames',
            filterField: 'locationName',
            queryFormat: QUERY_FORMATS.SEARCH,
            resolveDetails: ({ countryName, regionName }) =>
              [countryName, regionName].filter(Boolean).join(', '),
          }}
          transformSuggestionToOption={transformSuggestionToOption}
          triggerProps={{ label: 'Старт из' }}
        />
      </Grid>
      <Grid item={true} xs={6}>
        <OptionsSelect
          caption="Тип поездки"
          name="trip.tripType"
          inputId="TripEditCard-TripTypeOptions"
          onChange={handleChange}
          onBlur={handleBlur}
          optionRender={renderTripType}
          options={Object.values(TRIP_TYPES)}
          hasNullOption={true}
          value={tripFormValues.tripType}
        />
      </Grid>
    </Grid>
  );
}

TripEditFormSection.propTypes = {};

TripEditFormSection.defaultProps = {};

function transformSuggestionToOption(suggestion) {
  const { locationName, countryName } = suggestion;
  return {
    label: locationName,
    detail: countryName,
    suggestion,
  };
}
