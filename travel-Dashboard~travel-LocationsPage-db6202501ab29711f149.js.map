{"version":3,"sources":["webpack:///./src/packages/travel/dataSource/useTrips.js","webpack:///./src/packages/travel/dataSource/useCountries.js","webpack:///./src/packages/travel/dataSource/useUser.js","webpack:///./src/packages/travel/dataSource/useLocations.js","webpack:///./src/packages/travel/components/common/LocationsMap/utils/adaptMarkerData.js","webpack:///./src/packages/travel/components/common/LocationsMap/utils/resolveLocationFirstAndLastVisitDateTime.js","webpack:///./src/packages/travel/components/common/LocationsMap/consts.js","webpack:///./src/packages/travel/components/common/LocationsMap/utils/makeScaleUtils.js","webpack:///./src/modules/utilities/dateTime/formatDate.js","webpack:///./src/packages/travel/components/common/LocationsMap/utils/renderTitle.js","webpack:///./src/packages/travel/components/common/LocationsMap/utils/resolveMarkerUrl.js","webpack:///./src/packages/travel/components/common/LocationsMap/useMarkers.js","webpack:///./src/packages/travel/components/common/LocationsMap/useMarkersScaleSidebar.js","webpack:///./src/packages/travel/components/common/LocationsMap/LocationsMap.jsx"],"names":["useTripsStats","userAlias","tripsProvision","requiredTripsIds","tripsIds","tripsDict","useSelector","state","selectDict","shouldRequireAllTrips","missingTripsIds","filter","tripId","useProvision","domain","isProvision","modelName","observe","query","navigation","isDisabled","id","comparator","value","useTrips","useUser","user","locationsRating","userProvision","selectResult","data","visitsDict","ridesDict","countriesDict","locationsDict","visitsIds","useMemo","Array","from","Set","flatMap","tripsId","visits","ridesIds","rides","countriesIds","visitId","countryId","locationsIds","locationId","countriesProvision","useCountries","locationsProvision","useLocations","commonProvisionState","provisions","updatesCounter","sum","map","selectUpdatesCounter","isReady","every","selectIsReady","isPending","some","selectIsPending","isValid","selectIsValid","error","find","selectIsError","errors","selectError","Boolean","invalidate","forEach","mergeProvisionsState","isError","countriesRating","ratingsGroupedByCountries","reduce","memo","location","locationRating","push","mapValues","ratingsByCountry","ratings","length","Infinity","avg","rating","a","b","best","max","lengthRatio","Math","log","averageRating","calcCountriesRating","ridesStats","calcRidesStats","earliestDeparture","Date","min","rideId","departureDateTime","getTime","latestArrival","arrivalDateTime","selectItem","applicableSchemaName","condition","requiredLocationIds","missingLocationsIds","useLocationRatingRequest","useRequest","method","submitLocationRating","adaptMarkerData","lon","lat","locationName","accumulator","visit","firstVisitDateTime","lastVisitDateTime","resolveLocationFirstAndLastVisitDateTime","visitsCount","MARKERS_SCALES","BY_FIRST_VISIT","BY_LAST_VISIT","BY_VISITS_COUNT","BY_RATING","MARKERS_SCALE_DEFAULT","MARKERS_SCALE_BY_TIME_FILENAMES","MARKERS_SCALE_BY_SOURCES","stepByVisitsCount","stepByRating","LOCATION_RATING","PLACE_TO_LIVE","FEW_PER_YEAR","ONCE_PER_YEAR","ONCE_PER_TWO_YEARS","ONCE_PER_FIVE_YEARS","ONCE_PER_DECADE","TWICE_PER_LIVE","ONCE_PER_LIVE","NEVER","makeScaleByDateTimeUtils","field","resolveStep","step","minTime","diff","floor","resolveOptions","markersDataList","times","markerData","formatDate","date","format","locale","ru","renderRating","resolveMarkerUrl","scaleBy","markerSources","subPath","useStyles","makeStyles","formControl","width","setQueryFilter","queryFilter","classes","scaleByQuery","Object","values","includes","resolveActualScaleBy","useSidebar","closeSidebar","List","ListItem","FormControl","className","InputLabel","shrink","Select","labelId","autoWidth","onChange","event","target","MenuItem","key","googleMapContainer","margin","maxWidth","flexGrow","minHeight","position","googleMapPosition","top","left","right","bottom","LocationsMap","handleGoogleApiLoaded","markersData","useState","googleMapsApi","setGoogleMapsApi","isFirsRenderRef","useRef","useEffect","maps","bounds","LatLngBounds","markers","iconUrl","title","zIndex","marker","Marker","lng","icon","url","scaledSize","Size","scale","extend","current","setOptions","maxZoom","minZoom","fitBounds","setMap","setVisible","api","useMarkers","adaptedMarkersData","makeScaleUtils","options","join","cls","bootstrapURLKeys","__GOOGLE_MAP_API_KEY__","center","zoom","onGoogleApiLoaded","propTypes","PropTypes","string","objectOf","shape","visitsPropTypes","isRequired","locationPropTypes","arrayOf","number","oneOf","defaultProps","undefined"],"mappings":"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","file":"travel-Dashboard~travel-LocationsPage-db6202501ab29711f149.js","sourcesContent":["import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\nimport sum from 'lodash/sum';\nimport mapValues from 'lodash/mapValues';\nimport { useProvision, selectDict } from 'core/connection';\nimport {\n  selectResult,\n  selectIsPending,\n  selectIsReady,\n  selectIsError,\n  selectError,\n  selectIsValid,\n  selectUpdatesCounter,\n} from 'core/connection/request/controllerRedux';\nimport useUser from './useUser';\nimport useCountries from './useCountries';\nimport useLocations from './useLocations';\n\nexport default function useTrips({ userAlias, tripsIds: requiredTripsIds }) {\n  const { tripsDict } = useSelector(state => ({\n    tripsDict: selectDict(state, 'trips') || {},\n  }));\n  const shouldRequireAllTrips = !requiredTripsIds;\n  const missingTripsIds =\n    !shouldRequireAllTrips &&\n    requiredTripsIds.filter(tripId => !tripsDict[tripId]);\n\n  return useProvision({\n    domain: `travel.trips-${userAlias}`,\n    isProvision: true,\n    modelName: 'trips',\n    observe: userAlias,\n    query: {\n      userAlias,\n      navigation: { isDisabled: true },\n      filter: shouldRequireAllTrips\n        ? {}\n        : { id: { comparator: 'in', value: missingTripsIds } },\n    },\n  });\n}\n\nexport function useTripsStats({ userAlias, tripsIds: requiredTripsIds }) {\n  const tripsProvision = useTrips({ userAlias, tripsIds: requiredTripsIds });\n  const { user: { locationsRating = {} } = {}, ...userProvision } = useUser({\n    domain: `travel.trips-${userAlias}.user`,\n    userAlias,\n  });\n\n  const { data: tripsIds = [] } = selectResult(tripsProvision) || {};\n\n  const {\n    tripsDict,\n    visitsDict,\n    ridesDict,\n    countriesDict,\n    locationsDict,\n  } = useSelector(state => ({\n    tripsDict: selectDict(state, 'trips') || {},\n    visitsDict: selectDict(state, 'visits') || {},\n    ridesDict: selectDict(state, 'rides') || {},\n    countriesDict: selectDict(state, 'countries') || {},\n    locationsDict: selectDict(state, 'locations') || {},\n  }));\n\n  const visitsIds = useMemo(\n    () =>\n      Array.from(\n        new Set(tripsIds.flatMap(tripsId => tripsDict[tripsId]?.visits || [])),\n      ),\n    [tripsIds, tripsDict],\n  );\n\n  const ridesIds = useMemo(\n    () =>\n      Array.from(\n        new Set(tripsIds.flatMap(tripsId => tripsDict[tripsId]?.rides || [])),\n      ),\n    [tripsIds, tripsDict],\n  );\n\n  const countriesIds = useMemo(\n    () =>\n      Array.from(\n        new Set(\n          visitsIds.flatMap(visitId => visitsDict[visitId]?.countryId || []),\n        ),\n      ),\n    [visitsIds, visitsDict],\n  );\n\n  const locationsIds = useMemo(\n    () =>\n      Array.from(\n        new Set(\n          visitsIds.flatMap(visitId => visitsDict[visitId]?.locationId || []),\n        ),\n      ),\n    [visitsIds, visitsDict],\n  );\n\n  const countriesProvision = useCountries();\n  const locationsProvision = useLocations({\n    domain: `travel.locations-${userAlias}`,\n    locationsIds,\n  });\n\n  const commonProvisionState = mergeProvisionsState(\n    tripsProvision,\n    userProvision,\n    countriesProvision,\n    locationsProvision,\n  );\n\n  const { isError, isValid, isReady, isPending } = commonProvisionState;\n\n  const countriesRating = calcCountriesRating(\n    locationsIds,\n    locationsDict,\n    locationsRating,\n  );\n\n  return {\n    tripsProvision,\n    countriesProvision,\n    locationsProvision,\n\n    isError,\n    isValid,\n    isReady,\n    isPending,\n\n    tripsIds,\n    tripsDict,\n    visitsIds,\n    visitsDict,\n    ridesIds,\n    ridesDict,\n    ridesStats: calcRidesStats(ridesIds, ridesDict),\n    locationsIds,\n    locationsDict,\n    locationsRating,\n    countriesIds,\n    countriesDict,\n    countriesRating,\n  };\n}\n\nfunction mergeProvisionsState(...provisions) {\n  return {\n    updatesCounter: sum(provisions.map(selectUpdatesCounter)),\n    isReady: provisions.every(selectIsReady),\n    isPending: provisions.some(selectIsPending),\n    isValid: provisions.every(selectIsValid),\n    error: provisions.find(selectIsError),\n    errors: provisions.map(selectError).filter(Boolean),\n    invalidate: () => provisions.forEach(({ invalidate }) => invalidate()),\n  };\n}\n\nfunction calcRidesStats(ridesIds, ridesDict) {\n  return {\n    earliestDeparture: new Date(\n      min(\n        ridesIds.map(rideId => ridesDict[rideId]?.departureDateTime.getTime()),\n      ),\n    ),\n    latestArrival: new Date(\n      max(ridesIds.map(rideId => ridesDict[rideId]?.arrivalDateTime.getTime())),\n    ),\n  };\n}\n\nfunction calcCountriesRating(locationsIds, locationsDict, locationsRating) {\n  const ratingsGroupedByCountries = locationsIds.reduce((memo, locationId) => {\n    const location = locationsDict[locationId];\n    if (!location) {\n      return memo;\n    }\n    const locationRating = locationsRating[locationId];\n    const { countryId } = location;\n    if (!memo[countryId]) {\n      memo[countryId] = [];\n    }\n    memo[countryId].push(locationRating);\n    return memo;\n  }, {});\n\n  return mapValues(ratingsGroupedByCountries, ratingsByCountry =>\n    averageRating(ratingsByCountry),\n  );\n}\n\nfunction averageRating(ratings) {\n  if (!ratings.length) {\n    return Infinity;\n  }\n  const avg =\n    ratings.length / ratings.map(rating => 1 / rating).reduce((a, b) => a + b);\n\n  const best = max(ratings);\n\n  const lengthRatio = Math.log(ratings.length);\n\n  return 1 / (1 / avg + lengthRatio / best);\n}\n","import { useProvision } from 'core/connection';\nimport {\n  selectResult,\n  selectIsReady,\n  selectIsPending,\n  selectIsError,\n} from 'core/connection/request/controllerRedux';\n\nexport default function useCountries() {\n  return useProvision({\n    domain: `travel.countries`,\n    isProvision: true,\n    modelName: 'countries',\n    query: { navigation: { isDisabled: true } },\n  });\n}\n","import { useSelector } from 'react-redux';\nimport { useProvision, selectItem } from 'core/connection';\n\nexport default function useUser({ domain, userAlias }) {\n  const user = useSelector(state => selectItem(state, 'users', userAlias));\n  const provision = useProvision({\n    domain,\n    applicableSchemaName: 'item',\n    isProvision: true,\n    modelName: 'users',\n    observe: userAlias,\n    condition: Boolean(userAlias),\n    query: {\n      id: userAlias,\n    },\n  });\n  return { ...provision, user };\n}\n","import { useSelector } from 'react-redux';\nimport { useProvision, useRequest, selectDict } from 'core/connection';\n\nexport default function useLocations({\n  domain,\n  locationsIds: requiredLocationIds,\n}) {\n  const locationsDict = useSelector(\n    state => selectDict(state, 'locations') || {},\n  );\n\n  const missingLocationsIds = requiredLocationIds.filter(\n    locationId => !locationsDict[locationId],\n  );\n\n  return useProvision({\n    domain,\n    isProvision: true,\n    modelName: 'locations',\n    observe: requiredLocationIds,\n    condition: Boolean(missingLocationsIds.length),\n    query: {\n      filter: { id: { comparator: 'in', value: missingLocationsIds } },\n      navigation: { isDisabled: true },\n    },\n  });\n}\n\nexport function useLocationRatingRequest({ domain }) {\n  const [submitLocationRating, provision] = useRequest({\n    domain,\n    modelName: 'locations',\n    method: 'POST',\n  });\n\n  return {\n    ...provision,\n    submitLocationRating,\n  };\n}\n","import resolveLocationFirstAndLastVisitDateTime from './resolveLocationFirstAndLastVisitDateTime';\n\nexport default function adaptMarkerData({\n  locationsIds,\n  locationsDict,\n  visitsDict,\n  locationsRating,\n}) {\n  return locationsIds.map(locationId => {\n    const location = locationsDict[locationId];\n    if (!location) {\n      return null;\n    }\n    const { lon, lat, locationName, visitsIds } = location;\n    const {\n      firstVisitDateTime,\n      lastVisitDateTime,\n    } = resolveLocationFirstAndLastVisitDateTime(visitsIds, visitsDict);\n\n    return {\n      locationName,\n      lat,\n      lon,\n      firstVisitDateTime,\n      lastVisitDateTime,\n      locationRating: locationsRating[locationId],\n      visitsCount: location.visitsIds.length,\n    };\n  });\n}\n","import min from 'lodash/min';\nimport max from 'lodash/max';\n\nexport default function resolveLocationFirstAndLastVisitDateTime(\n  visitsIds,\n  visitsDict,\n) {\n  return visitsIds.reduce(\n    (accumulator, visitId) => {\n      const visit = visitsDict[visitId];\n      if (visit) {\n        const { arrivalDateTime, departureDateTime } = visit;\n        accumulator.firstVisitDateTime = min([\n          accumulator.firstVisitDateTime,\n          arrivalDateTime,\n        ]);\n        accumulator.lastVisitDateTime = max([\n          accumulator.lastVisitDateTime,\n          departureDateTime,\n        ]);\n      }\n      return accumulator;\n    },\n    { firstVisitDateTime: null, lastVisitDateTime: null },\n  );\n}\n","export const KEY_MARKERS_SCALE_BY = 'scale';\n\nexport const MARKERS_SCALES = {\n  BY_FIRST_VISIT: 'fv',\n  BY_LAST_VISIT: 'lv',\n  BY_VISITS_COUNT: 'vc',\n  BY_RATING: 'r',\n};\n\nexport const MARKERS_SCALE_DEFAULT = MARKERS_SCALES.BY_FIRST_VISIT;\n\nexport const MARKERS_SCALE_IMAGES_BASE_PATH =\n  'https://res.cloudinary.com/dc2eke0gj/image/upload/markers/';\n\nexport const MARKERS_SCALE_BY_TIME_FILENAMES = [\n  'step_by_time_1_zjtrlw.png',\n  'step_by_time_2_tvotvg.png',\n  'step_by_time_3_ylj1vi.png',\n  'step_by_time_4_uovfrs.png',\n  'step_by_time_5_s4jq0u.png',\n  'step_by_time_6_lmihnf.png',\n];\n\nexport const MARKERS_SCALE_BY_RATING_FILENAMES = [\n  'step_by_rating_1_id2qgb.png',\n  'step_by_rating_2_iiqvik.png',\n  'step_by_rating_3_x2gzsd.png',\n  'step_by_rating_4_cbqdcn.png',\n  'step_by_rating_5_viyhls.png',\n  'step_by_rating_6_zzfgki.png',\n  'step_by_rating_7_pjjhhq.png',\n  'step_by_rating_8_vgetsd.png',\n  'step_by_rating_9_t6tenz.png',\n  'step_by_rating_10_yjywr0.png',\n];\n\nexport const MARKERS_SCALE_BY_VISITS_FILENAMES = [\n  'step_by_visits_1_zv3tba.png',\n  'step_by_visits_2_qthjqa.png',\n  'step_by_visits_3_xcjyla.png',\n  'step_by_visits_4_kwdwka.png',\n  'step_by_visits_5_xnnipa.png',\n];\n\nexport const MARKERS_SCALE_BY_SOURCES = {\n  [MARKERS_SCALES.BY_FIRST_VISIT]: MARKERS_SCALE_BY_TIME_FILENAMES,\n  [MARKERS_SCALES.BY_LAST_VISIT]: MARKERS_SCALE_BY_TIME_FILENAMES,\n  [MARKERS_SCALES.BY_VISITS_COUNT]: MARKERS_SCALE_BY_VISITS_FILENAMES,\n  [MARKERS_SCALES.BY_RATING]: MARKERS_SCALE_BY_RATING_FILENAMES,\n};\n","import min from 'lodash/min';\nimport max from 'lodash/max';\nimport { LOCATION_RATING } from 'travel/models/users/consts';\nimport { MARKERS_SCALES } from '../consts';\n\nexport default function makeScaleUtils(scaleBy) {\n  switch (scaleBy) {\n    case MARKERS_SCALES.BY_VISITS_COUNT:\n      return {\n        resolveStep: stepByVisitsCount,\n      };\n    case MARKERS_SCALES.BY_RATING:\n      return {\n        resolveStep: stepByRating,\n      };\n    case MARKERS_SCALES.BY_LAST_VISIT:\n      return makeScaleByDateTimeUtils('lastVisitDateTime');\n    case MARKERS_SCALES.BY_FIRST_VISIT:\n    default:\n      return makeScaleByDateTimeUtils('firstVisitDateTime');\n  }\n}\n\nfunction stepByVisitsCount({ visitsCount }) {\n  switch (true) {\n    case visitsCount > 10:\n      return 5;\n    case visitsCount > 5:\n      return 4;\n    case visitsCount > 2:\n      return 3;\n    case visitsCount > 1:\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nfunction stepByRating({ locationRating }) {\n  switch (locationRating) {\n    case LOCATION_RATING.PLACE_TO_LIVE:\n      return 1;\n    case LOCATION_RATING.FEW_PER_YEAR:\n    case LOCATION_RATING.ONCE_PER_YEAR:\n      return 3;\n    case LOCATION_RATING.ONCE_PER_TWO_YEARS:\n    case LOCATION_RATING.ONCE_PER_FIVE_YEARS:\n      return 4;\n    case LOCATION_RATING.ONCE_PER_DECADE:\n    case LOCATION_RATING.TWICE_PER_LIVE:\n      return 7;\n    case LOCATION_RATING.ONCE_PER_LIVE:\n      return 9;\n    case LOCATION_RATING.NEVER:\n      return 10;\n    default:\n      return 6;\n  }\n}\n\nconst stepsByDateTimeCount = 6;\nfunction makeScaleByDateTimeUtils(field) {\n  return {\n    resolveStep: function stepByDateTime(\n      { [field]: dateTime },\n      { minTime, diff },\n    ) {\n      const step = ((dateTime - minTime) / diff) * stepsByDateTimeCount;\n      return Math.min(Math.max(Math.floor(step), 0), stepsByDateTimeCount);\n    },\n    resolveOptions: function resolveOptionsForStepByDateTime(markersDataList) {\n      const times = markersDataList\n        .map(markerData => markerData[field] && markerData[field].getTime())\n        .filter(Boolean);\n\n      const minTime = min(times);\n      const maxTime = max(times) + 1;\n      const diff = maxTime - minTime;\n      return { minTime, diff };\n    },\n  };\n}\n","import ru from 'date-fns/locale/ru';\nimport format from 'date-fns/format';\n\nexport default function formatDate(date) {\n  return format(date, 'eeeeee, d MMMM yyyy', { locale: ru });\n}\n","import formatDate from 'modules/utilities/dateTime/formatDate';\nimport { LOCATION_RATING } from 'travel/models/users/consts';\n\nexport default function renderTitle({\n  locationName,\n  locationRating,\n  visitsCount,\n  firstVisitDateTime,\n  lastVisitDateTime,\n}) {\n  return [\n    locationName,\n    `Посещено ${visitsCount} раз`,\n    `Впервые ${formatDate(firstVisitDateTime)}`,\n    visitsCount > 1 && `Прошлое посешение ${formatDate(lastVisitDateTime)}`,\n    `Рейтинг: ${renderRating(locationRating)}`,\n  ]\n    .filter(Boolean)\n    .join('\\n');\n}\n\nfunction renderRating(locationRating) {\n  switch (locationRating) {\n    case LOCATION_RATING.PLACE_TO_LIVE:\n      return '*****';\n    case LOCATION_RATING.FEW_PER_YEAR:\n    case LOCATION_RATING.ONCE_PER_YEAR:\n      return '****';\n    case LOCATION_RATING.ONCE_PER_TWO_YEARS:\n    case LOCATION_RATING.ONCE_PER_FIVE_YEARS:\n      return '***';\n    case LOCATION_RATING.ONCE_PER_DECADE:\n    case LOCATION_RATING.TWICE_PER_LIVE:\n      return '**';\n    case LOCATION_RATING.ONCE_PER_LIVE:\n      return '*';\n    case LOCATION_RATING.NEVER:\n      return '-';\n    default:\n      return '?';\n  }\n}\n","import {\n  MARKERS_SCALE_BY_SOURCES,\n  MARKERS_SCALE_IMAGES_BASE_PATH,\n} from '../consts';\n\nexport default function resolveMarkerUrl(step, scaleBy) {\n  const markerSources = MARKERS_SCALE_BY_SOURCES[scaleBy];\n  const subPath = markerSources[step - 1] || markerSources[0];\n  return `${MARKERS_SCALE_IMAGES_BASE_PATH}${subPath}`;\n}\n","import { useState, useEffect, useRef } from 'react';\n\nexport default markersData => {\n  const [googleMapsApi, setGoogleMapsApi] = useState(null);\n\n  const isFirsRenderRef = useRef(true);\n\n  useEffect(\n    () => {\n      if (!googleMapsApi) {\n        return undefined;\n      }\n      const { map, maps } = googleMapsApi;\n      const bounds = new maps.LatLngBounds();\n      const markers = markersData.map(\n        ({ lat, lon, iconUrl, title, zIndex }) => {\n          const marker = new maps.Marker({\n            map,\n            position: { lat, lng: lon },\n            icon: {\n              url: iconUrl,\n              scaledSize: new maps.Size(24, 24),\n            },\n            scale: 0.5,\n            title,\n            zIndex,\n          });\n          bounds.extend(marker.position);\n          return marker;\n        },\n      );\n      if (isFirsRenderRef.current) {\n        map.setOptions({ maxZoom: 11, minZoom: 2 });\n        map.fitBounds(bounds);\n        map.setOptions({ maxZoom: null, minZoom: null });\n        isFirsRenderRef.current = false;\n      }\n      return () => {\n        markers.forEach(marker => {\n          marker.setMap(null);\n          marker.setVisible(false);\n        });\n        markers.length = 0;\n      };\n    },\n    [googleMapsApi, markersData],\n  );\n  return { handleGoogleApiLoaded: api => setGoogleMapsApi(api) };\n};\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSidebar } from 'core/context/SidebarContext';\nimport {\n  MARKERS_SCALES,\n  KEY_MARKERS_SCALE_BY,\n  MARKERS_SCALE_DEFAULT,\n} from './consts';\n\nconst useStyles = makeStyles({\n  formControl: {\n    width: '100%',\n  },\n});\n\nexport default function(setQueryFilter, queryFilter) {\n  const classes = useStyles();\n  const { [KEY_MARKERS_SCALE_BY]: scaleByQuery } = queryFilter || {};\n  const scaleBy = resolveActualScaleBy(scaleByQuery);\n\n  useSidebar(\n    ({ closeSidebar }) => (\n      <List>\n        <ListItem>\n          <FormControl className={classes.formControl}>\n            <InputLabel shrink={true} id=\"select-groupBy-filter-label\">\n              Раскрасить маркеры\n            </InputLabel>\n            <Select\n              labelId=\"select-groupBy-filter-label\"\n              autoWidth={true}\n              id=\"select-groupBy-filter\"\n              value={scaleBy}\n              onChange={event => {\n                closeSidebar();\n                setQueryFilter({\n                  [KEY_MARKERS_SCALE_BY]: event.target.value,\n                });\n              }}\n            >\n              <MenuItem\n                key={MARKERS_SCALES.BY_FIRST_VISIT}\n                value={MARKERS_SCALES.BY_FIRST_VISIT}\n              >\n                По первому посещению\n              </MenuItem>\n              <MenuItem\n                key={MARKERS_SCALES.BY_LAST_VISIT}\n                value={MARKERS_SCALES.BY_LAST_VISIT}\n              >\n                По последнему посещению\n              </MenuItem>\n              <MenuItem\n                key={MARKERS_SCALES.BY_VISITS_COUNT}\n                value={MARKERS_SCALES.BY_VISITS_COUNT}\n              >\n                По числу посещений\n              </MenuItem>\n              <MenuItem\n                key={MARKERS_SCALES.BY_RATING}\n                value={MARKERS_SCALES.BY_RATING}\n              >\n                По рейтингу\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </ListItem>\n      </List>\n    ),\n    [scaleBy],\n  );\n\n  return { scaleBy };\n}\n\nfunction resolveActualScaleBy(scaleByQuery) {\n  return Object.values(MARKERS_SCALES).includes(scaleByQuery)\n    ? scaleByQuery\n    : MARKERS_SCALE_DEFAULT;\n}\n","/* globals __GOOGLE_MAP_API_KEY__ */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport cls from 'classnames';\nimport GoogleMapReact from 'google-map-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport locationPropTypes from 'travel/models/locations/propTypes';\nimport visitsPropTypes from 'travel/models/visits/propTypes';\nimport adaptMarkerData from './utils/adaptMarkerData';\nimport makeScaleUtils from './utils/makeScaleUtils';\nimport renderTitle from './utils/renderTitle';\nimport resolveMarkerUrl from './utils/resolveMarkerUrl';\nimport { MARKERS_SCALES } from './consts';\nimport useMarkers from './useMarkers';\n\nexport useMarkersScaleSidebar from './useMarkersScaleSidebar';\n\nconst useStyles = makeStyles({\n  googleMapContainer: {\n    margin: '12px 0',\n    maxWidth: '100%',\n    flexGrow: 1,\n    minHeight: ({ minHeight }) => minHeight,\n    position: 'relative',\n  },\n  googleMapPosition: {\n    position: 'absolute',\n    top: '0',\n    left: '0',\n    right: '0',\n    bottom: '0',\n  },\n});\n\nexport default function LocationsMap({\n  className,\n  locationsDict,\n  visitsDict,\n  locationsRating,\n  locationsIds,\n  minHeight,\n  scaleBy,\n}) {\n  const classes = useStyles({ minHeight });\n  const markersData = useMemo(\n    () => {\n      const adaptedMarkersData = adaptMarkerData({\n        locationsDict,\n        visitsDict,\n        locationsRating,\n        locationsIds,\n      });\n      const { resolveStep, resolveOptions } = makeScaleUtils(scaleBy);\n      const options = resolveOptions && resolveOptions(adaptedMarkersData);\n      return adaptedMarkersData.map(markerData => {\n        const step = resolveStep(markerData, options);\n        return {\n          ...markerData,\n          zIndex: [\n            MARKERS_SCALES.BY_RATING,\n            MARKERS_SCALES.BY_FIRST_VISIT,\n          ].includes(scaleBy)\n            ? 10 - step\n            : step,\n          iconUrl: resolveMarkerUrl(step, scaleBy),\n          title: renderTitle(markerData),\n        };\n      });\n    },\n    [locationsDict, visitsDict, locationsRating, locationsIds, scaleBy],\n  );\n  const { handleGoogleApiLoaded } = useMarkers(markersData);\n\n  return (\n    <div className={cls(className, classes.googleMapContainer)}>\n      <div className={classes.googleMapPosition}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: __GOOGLE_MAP_API_KEY__ }}\n          center={{ lat: 0, lng: 0 }}\n          zoom={11}\n          onGoogleApiLoaded={handleGoogleApiLoaded}\n        />\n      </div>\n    </div>\n  );\n}\n\nLocationsMap.propTypes = {\n  className: PropTypes.string,\n  visitsDict: PropTypes.objectOf(PropTypes.shape(visitsPropTypes)).isRequired,\n  locationsDict: PropTypes.objectOf(PropTypes.shape(locationPropTypes))\n    .isRequired,\n  locationsIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  locationsRating: PropTypes.objectOf(PropTypes.number).isRequired,\n  minHeight: PropTypes.number,\n  scaleBy: PropTypes.oneOf(Object.values(MARKERS_SCALES)).isRequired,\n};\n\nLocationsMap.defaultProps = {\n  className: undefined,\n  minHeight: '400px',\n};\n"],"sourceRoot":""}