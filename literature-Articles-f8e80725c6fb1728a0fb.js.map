{"version":3,"file":"literature-Articles-f8e80725c6fb1728a0fb.js","mappings":"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","sources":["webpack://mine/./src/packages/literature/pages/ArticleEditor/blocks/ArticleEditorForm/transliteration.js","webpack://mine/./src/packages/literature/pages/ArticleEditor/blocks/ArticleEditorForm/ArticleEditorForm.jsx","webpack://mine/./src/packages/literature/pages/ArticleEditor/ArticleEditor.jsx"],"sourcesContent":["const mapping = {\n  а: 'a',\n  б: 'b',\n  в: 'v',\n  г: 'g',\n  д: 'd',\n  е: 'e',\n  ё: 'e',\n  ж: 'j',\n  з: 'z',\n  и: 'i',\n  й: 'y',\n  к: 'k',\n  л: 'l',\n  м: 'm',\n  н: 'n',\n  о: 'o',\n  п: 'p',\n  р: 'r',\n  с: 's',\n  т: 't',\n  у: 'u',\n  ф: 'f',\n  х: 'h',\n  ц: 'c',\n  ч: 'ch',\n  ш: 'sh',\n  щ: 'shch',\n  ь: '',\n  ы: 'y',\n  Ъ: '',\n  э: 'e',\n  ю: 'u',\n  я: 'ya',\n};\n\nexport default function transliteration(text) {\n  return Array.from(text)\n    .map(char => mapping[char] ?? char)\n    .join('');\n}\n","import React, { useState, useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport MineEditor, {\n  useEditorState,\n  exportContentFromState,\n  RenderContent,\n} from 'modules/MineEditor';\nimport transliteration from './transliteration';\n\nconst useStyles = makeStyles({\n  articleBody: {\n    marginTop: '12px',\n  },\n});\n\nexport default function ArticleEditorForm({\n  initialArticle,\n  onSubmit,\n  isSubmitting,\n}) {\n  const classes = useStyles();\n  const [isInViewMode, setIsInViewMode] = useState(false);\n  const handleToggleViewMode = useCallback(\n    () => setIsInViewMode(prevIsInViewMode => !prevIsInViewMode),\n    [],\n  );\n\n  const isCreation = !initialArticle;\n\n  const {\n    title: initialTitle = 'Новая статья',\n    isDraft: initialIsDraft = true,\n    body: initialContent,\n  } = initialArticle || {};\n\n  const [{ slug, hasSlug }, setSlug] = useState({});\n  const [title, setTitle] = useState(initialTitle);\n  const [isDraft, setIsDraft] = useState(initialIsDraft);\n  const { editorState, setEditorState } = useEditorState(initialContent);\n\n  return (\n    <Grid container={true} spacing={3} alignItems=\"center\">\n      <Grid item={true} xs={4}>\n        <FormControl>\n          <InputLabel htmlFor=\"component-simple\">Название статьи</InputLabel>\n          <Input\n            id=\"component-simple\"\n            value={title}\n            onChange={event => {\n              setTitle(event.currentTarget.value);\n              if (!hasSlug) {\n                setSlug({\n                  slug: toSlug(event.currentTarget.value),\n                  hasSlug: false,\n                });\n              }\n            }}\n          />\n        </FormControl>\n      </Grid>\n      {isCreation && (\n        <Grid item={true} xs={4}>\n          <FormControl fullWidth={true}>\n            <InputLabel htmlFor=\"component-simple\" shrink={Boolean(slug)}>\n              Slug\n            </InputLabel>\n            <Input\n              id=\"component-simple\"\n              value={slug}\n              onChange={event =>\n                setSlug({\n                  slug: toSlug(event.currentTarget.value),\n                  hasSlug: true,\n                })\n              }\n            />\n          </FormControl>\n        </Grid>\n      )}\n      <Grid item={true} xs={4}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={isDraft}\n              onChange={event => setIsDraft(event.target.checked)}\n            />\n          }\n          label=\"Черновик\"\n        />\n      </Grid>\n      <Grid item={true} xs={4}>\n        {isSubmitting ? (\n          <Typography variant=\"caption\">Идет сохранение...</Typography>\n        ) : (\n          <Button\n            disabled={isCreation && !slug}\n            onClick={() =>\n              onSubmit({\n                title,\n                isDraft,\n                body: exportContentFromState(editorState),\n                slug: isCreation ? slug : undefined,\n              })\n            }\n          >\n            Сохранить\n          </Button>\n        )}\n      </Grid>\n      <Grid item={true} xs={12}>\n        <FormControlLabel\n          className={classes.toggleContainer}\n          control={\n            <Switch\n              name=\"viewMode\"\n              checked={isInViewMode}\n              onChange={handleToggleViewMode}\n            />\n          }\n          label=\"Режим просмотра\"\n        />\n      </Grid>\n      <Grid item={true} xs={12}>\n        <div className={classes.articleBody}>\n          <Typography variant=\"caption\">Текст статьи</Typography>\n          {isInViewMode ? (\n            <RenderContent data={editorState.getCurrentContent()} />\n          ) : (\n            <MineEditor\n              editorState={editorState}\n              setEditorState={setEditorState}\n            />\n          )}\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction toSlug(text) {\n  return transliteration(\n    text\n      .toLowerCase()\n      .replace(/\\s/g, '_')\n      .replace(/[^a-zа-я0-9]/g, ''),\n  );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { usePaths } from 'modules/packages';\nimport { useArticle, useSubmitArticle } from '../../dataSource/articles';\nimport ArticleEditorForm from './blocks/ArticleEditorForm';\n\nconst domain = 'ArticleEditor';\n\nexport default function ArticleEditor({\n  match: {\n    params: { slug },\n  },\n}) {\n  const history = useHistory();\n  const { literature: literaturePaths, code: codePaths } = usePaths();\n  const selfPaths = literaturePaths || codePaths;\n  const { article } = useArticle({ slug, domain });\n  const { submitArticle, isSubmitting } = useSubmitArticle({ domain });\n\n  if (slug && !article) {\n    return null;\n  }\n\n  const isCreation = !article;\n  return (\n    <ArticleEditorForm\n      initialArticle={article}\n      isSubmitting={isSubmitting}\n      onSubmit={async data => {\n        await submitArticle({\n          query: {\n            id: article?.id,\n            body: { ...article, ...data },\n          },\n        });\n        if (isCreation) {\n          history.push(selfPaths.articles.toUrl({ slug: data?.slug }));\n        }\n      }}\n    />\n  );\n}\n"],"names":["mapping","а","б","в","г","д","е","ё","ж","з","и","й","к","л","м","н","о","п","р","с","т","у","ф","х","ц","ч","ш","щ","ь","ы","Ъ","э","ю","я","useStyles","makeStyles","articleBody","marginTop","ArticleEditorForm","initialArticle","onSubmit","isSubmitting","classes","useState","isInViewMode","setIsInViewMode","handleToggleViewMode","useCallback","prevIsInViewMode","isCreation","title","initialTitle","isDraft","initialIsDraft","initialContent","body","slug","hasSlug","setSlug","setTitle","setIsDraft","useEditorState","editorState","setEditorState","Grid","container","spacing","alignItems","item","xs","FormControl","InputLabel","htmlFor","Input","id","value","onChange","event","currentTarget","toSlug","fullWidth","shrink","Boolean","FormControlLabel","control","Checkbox","checked","target","label","Typography","variant","Button","disabled","onClick","exportContentFromState","undefined","className","toggleContainer","Switch","name","data","getCurrentContent","MineEditor","text","Array","from","map","char","join","transliteration","toLowerCase","replace","domain","ArticleEditor","match","params","history","useHistory","usePaths","literaturePaths","literature","codePaths","code","selfPaths","article","useArticle","useSubmitArticle","submitArticle","query","push","articles","toUrl"],"sourceRoot":""}