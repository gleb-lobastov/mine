{"version":3,"file":"278-9081e71ef01ce3a09aa7.js","mappings":"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","sources":["webpack://mine/./src/modules/utilities/dateTime/isValidDate.js","webpack://mine/./src/modules/utilities/dateTime/safeDateFormat.js","webpack://mine/./src/packages/travel/dataSource/useVisit.js","webpack://mine/./src/packages/travel/dataSource/useCountries.js","webpack://mine/./src/packages/travel/dataSource/useLocations.js","webpack://mine/./src/packages/travel/dataSource/useTrips.js","webpack://mine/./src/core/connection/request/utils/mergeProvisionsState.js","webpack://mine/./src/packages/travel/dataSource/useUser.js"],"sourcesContent":["export default function isValidDate(date) {\n  return date instanceof Date && !Number.isNaN(date.getTime());\n}\n","import dateFormat from 'date-fns/format';\nimport isValidDate from './isValidDate';\n\nexport default function safeDateFormat(date, ...args) {\n  if (!isValidDate(date)) {\n    return '?';\n  }\n  return dateFormat(date, ...args);\n}\n","import { useSelector } from 'react-redux';\nimport { useProvision, useRequest, selectDict } from 'core/connection';\n\nexport default function useVisit({ userAlias, visitId: requiredVisitId }) {\n  const { visitsDict } = useSelector(state => ({\n    visitsDict: selectDict(state, 'visits') || {},\n  }));\n  const visit = visitsDict[requiredVisitId];\n\n  return {\n    visit,\n    ...useProvision({\n      domain: `travel.visit${requiredVisitId}-${userAlias}`,\n      isProvision: true,\n      modelName: 'visits',\n      observe: requiredVisitId,\n      condition: !visit,\n      query: {\n        userAlias,\n        filter: { visit_id: { comparator: '=', value: requiredVisitId } },\n        navigation: { isDisabled: true },\n      },\n    }),\n  };\n}\n\nexport function useAddVisitPhotoRequest({ domain }) {\n  const [submitVisitPhoto, provision] = useRequest({\n    domain,\n    modelName: 'visits', // todo: actually this is assets model, not visits. Moreover this is photos model\n    method: 'POST',\n    contentType: 'multipart/form-data',\n  });\n\n  return {\n    ...provision,\n    submitVisitPhoto,\n  };\n}\n","import { useProvision } from 'core/connection';\n\nexport default function useCountries() {\n  return useProvision({\n    domain: `travel.countries`,\n    isProvision: true,\n    modelName: 'countries',\n    query: { navigation: { isDisabled: true } },\n  });\n}\n","import { useSelector } from 'react-redux';\nimport { useProvision, useRequest, selectDict } from 'core/connection';\n\nexport default function useLocations({\n  domain,\n  locationsIds: requiredLocationIds,\n}) {\n  const locationsDict = useSelector(\n    state => selectDict(state, 'locations') || {},\n  );\n\n  const missingLocationsIds = requiredLocationIds.filter(\n    locationId => !locationsDict[locationId],\n  );\n\n  return useProvision({\n    domain,\n    isProvision: true,\n    modelName: 'locations',\n    observe: requiredLocationIds,\n    condition: Boolean(missingLocationsIds.length),\n    query: {\n      filter: { id: { comparator: 'in', value: missingLocationsIds } },\n      navigation: { isDisabled: true },\n    },\n  });\n}\n\nexport function useLocationRatingRequest({ domain }) {\n  const [submitLocationRating, provision] = useRequest({\n    domain,\n    modelName: 'locations',\n    method: 'POST',\n  });\n\n  return {\n    ...provision,\n    submitLocationRating,\n  };\n}\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\nimport { useProvision, selectDict } from 'core/connection';\nimport { selectResult } from 'core/connection/request/controllerRedux';\nimport mergeProvisionsState from 'core/connection/request/utils/mergeProvisionsState';\nimport useUser from './useUser';\nimport useCountries from './useCountries';\nimport useLocations from './useLocations';\n\nexport default function useTrips({ userAlias, tripsIds: requiredTripsIds }) {\n  const { tripsDict } = useSelector(state => ({\n    tripsDict: selectDict(state, 'trips') || {},\n  }));\n\n  const shouldRequireAllTrips = !requiredTripsIds;\n  const missingTripsIds =\n    !shouldRequireAllTrips &&\n    requiredTripsIds.filter(tripId => !tripsDict[tripId]);\n\n  const tripsIdsUniqStr = missingTripsIds ? missingTripsIds.join(',') : '*';\n  const tripsFilter = shouldRequireAllTrips\n    ? {}\n    : { id: { comparator: 'in', value: missingTripsIds } };\n\n  return useProvision({\n    domain: `travel.trips-${userAlias}-${tripsIdsUniqStr}`,\n    isProvision: true,\n    modelName: 'trips',\n    observe: userAlias,\n    condition: shouldRequireAllTrips || missingTripsIds.length > 0,\n    query: {\n      userAlias,\n      navigation: { isDisabled: true },\n      filter: {\n        user_alias: { comparator: '=', value: userAlias },\n        ...tripsFilter,\n      },\n    },\n  });\n}\n\nexport function useTripsStats({ userAlias, tripsIds: requiredTripsIds }) {\n  const tripsProvision = useTrips({ userAlias, tripsIds: requiredTripsIds });\n  const { user: { locationsRating = {} } = {}, ...userProvision } = useUser({\n    domain: `travel.trips-${userAlias}.user`,\n    userAlias,\n  });\n\n  const { data: tripsIds = [] } = requiredTripsIds\n    ? { data: requiredTripsIds }\n    : selectResult(tripsProvision) || {};\n\n  const {\n    tripsDict,\n    visitsDict,\n    ridesDict,\n    countriesDict,\n    locationsDict,\n  } = useSelector(state => ({\n    tripsDict: selectDict(state, 'trips') || {},\n    visitsDict: selectDict(state, 'visits') || {},\n    ridesDict: selectDict(state, 'rides') || {},\n    countriesDict: selectDict(state, 'countries') || {},\n    locationsDict: selectDict(state, 'locations') || {},\n  }));\n\n  const visitsIds = useUniqField(tripsIds, tripsDict, 'visits');\n  const ridesIds = useUniqField(tripsIds, tripsDict, 'rides');\n  const countriesIds = useUniqField(visitsIds, visitsDict, 'countryId');\n  const locationsIds = useUniqField(visitsIds, visitsDict, 'locationId');\n\n  const countriesProvision = useCountries();\n  const locationsProvision = useLocations({\n    domain: `travel.locations-${userAlias}`,\n    locationsIds,\n  });\n\n  const commonProvisionState = mergeProvisionsState(\n    tripsProvision,\n    userProvision,\n    countriesProvision,\n    locationsProvision,\n  );\n\n  const { isError, isValid, isReady, isPending } = commonProvisionState;\n\n  return {\n    userProvision,\n    tripsProvision,\n    countriesProvision,\n    locationsProvision,\n\n    isError,\n    isValid,\n    isReady,\n    isPending,\n\n    tripsIds,\n    tripsDict,\n    visitsIds,\n    visitsDict,\n    ridesIds,\n    ridesDict,\n    ridesStats: calcRidesStats(ridesIds, ridesDict),\n    locationsIds,\n    locationsDict,\n    locationsRating,\n    countriesIds,\n    countriesDict,\n  };\n}\n\nfunction calcRidesStats(ridesIds, ridesDict) {\n  return {\n    earliestDeparture: new Date(\n      min(\n        ridesIds.map(rideId => ridesDict[rideId]?.departureDateTime.getTime()),\n      ),\n    ),\n    latestArrival: new Date(\n      max(ridesIds.map(rideId => ridesDict[rideId]?.arrivalDateTime.getTime())),\n    ),\n  };\n}\n\nfunction useUniqField(entitiesIds, entitiesDict, fieldName) {\n  return useMemo(\n    () =>\n      Array.from(\n        new Set(\n          entitiesIds.flatMap(\n            entityId => entitiesDict[entityId]?.[fieldName] || [],\n          ),\n        ),\n      ),\n    [entitiesIds, entitiesDict, fieldName],\n  );\n}\n","import sum from 'lodash/sum';\nimport {\n  selectError,\n  selectIsError,\n  selectIsPending,\n  selectIsReady,\n  selectIsValid,\n  selectUpdatesCounter,\n} from '../controllerRedux';\n\nexport default function mergeProvisionsState(...provisions) {\n  return {\n    updatesCounter: sum(provisions.map(selectUpdatesCounter)),\n    isReady: provisions.every(selectIsReady),\n    isPending: provisions.some(selectIsPending),\n    isValid: provisions.every(selectIsValid),\n    error: provisions.find(selectIsError),\n    errors: provisions.map(selectError).filter(Boolean),\n    invalidate: () => provisions.forEach(({ invalidate }) => invalidate()),\n  };\n}\n","import { useSelector } from 'react-redux';\nimport { useProvision, selectItem } from 'core/connection';\n\nexport default function useUser({ domain, userAlias }) {\n  const user = useSelector(state => selectItem(state, 'users', userAlias));\n  const provision = useProvision({\n    domain,\n    applicableSchemaName: 'item',\n    isProvision: true,\n    modelName: 'users',\n    observe: userAlias,\n    condition: Boolean(userAlias),\n    query: {\n      id: userAlias,\n    },\n  });\n  return { ...provision, user };\n}\n"],"names":["isValidDate","date","Date","Number","isNaN","getTime","safeDateFormat","args","dateFormat","useVisit","userAlias","requiredVisitId","visitId","visit","useSelector","state","visitsDict","selectDict","useProvision","domain","isProvision","modelName","observe","condition","query","filter","visit_id","comparator","value","navigation","isDisabled","useAddVisitPhotoRequest","useRequest","method","contentType","submitVisitPhoto","useCountries","useLocations","requiredLocationIds","locationsIds","locationsDict","missingLocationsIds","locationId","Boolean","length","id","useLocationRatingRequest","submitLocationRating","useTripsStats","requiredTripsIds","tripsIds","tripsProvision","tripsDict","shouldRequireAllTrips","missingTripsIds","tripId","tripsIdsUniqStr","join","tripsFilter","user_alias","useTrips","useUser","user","locationsRating","userProvision","data","selectResult","ridesDict","countriesDict","visitsIds","useUniqField","ridesIds","countriesIds","countriesProvision","locationsProvision","commonProvisionState","provisions","updatesCounter","sum","map","selectUpdatesCounter","isReady","every","selectIsReady","isPending","some","selectIsPending","isValid","selectIsValid","error","find","selectIsError","errors","selectError","invalidate","forEach","mergeProvisionsState","isError","ridesStats","calcRidesStats","earliestDeparture","min","rideId","departureDateTime","latestArrival","max","arrivalDateTime","entitiesIds","entitiesDict","fieldName","useMemo","Array","from","Set","flatMap","entityId","selectItem","applicableSchemaName"],"sourceRoot":""}